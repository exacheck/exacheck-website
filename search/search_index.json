{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Health check services and advertise BGP routes using ExaBGP.</p> <p>Features Get ExaCheck</p> <p>ExaCheck works in conjunction with ExaBGP to health check services and announce BGP routes based on the availability of those services.</p> <p>ExaCheck is configured in a YAML or JSON based configuration file (example) which allows for easy configuration of health checks without having to create scripts.</p>"},{"location":"#example-usage-scenario","title":"Example Usage Scenario","text":"<p>As an example, you may have two DNS servers:</p> <ul> <li>dns1: <code>192.0.2.1/29</code></li> <li>dns2: <code>192.0.2.2/29</code></li> </ul> <p>Both DNS servers have an IP bound to their loopback adapter to handle DNS requests: <code>192.0.2.255</code>. You would like to ensure that traffic to <code>192.0.2.255</code> is load balanced between the two DNS servers. In case a server fails you would like it to stop receiving traffic.</p> <p>To achieve this, you would deploy ExaBGP with ExaCheck; this example assumes it is located on the DNS servers themselves. You would setup BGP peering between ExaBGP and the router(s) that handle the traffic for <code>192.0.2.0/29</code>. ExaCheck would be configured to perform a health check to each server and advertise <code>192.0.2.255</code> if a DNS response is received.</p> <p>The ExaCheck configuration on both DNS servers would look something like this:</p> <pre><code>---\n\n# The list of health checks\nchecks:\n\n  - name: Example DNS Service\n    description: Perform a basic SOA query for example.com to 192.0.2.255. If the query returns a response, 192.0.2.255 would be advertised with BGP.\n    args:\n      method: dns\n      host: 192.0.2.255 # Note DNS queries are being sent to 192.0.2.255 which should be bound to loopback\n      query: example.com\n    prefixes:\n      - 192.0.2.255\n    nexthop: self\n</code></pre> <p>If the DNS service does not respond ExaCheck will then mark the service as down and withdraw the route for that server (providing high availability). When the service is healthy, the router for <code>192.0.2.0/29</code> will be able to see two paths for <code>192.0.2.255</code> with the same preference/metric thus allowing it to use equal cost multiple multipath or unequal cost multipath (providing load balancing).</p> <p>With this setup no load balancer hardware/software is required. Depending on the router, they may also handle ECMP at line speed and without state; this can be advantageous for services that experience DDoS attacks due to bypassing a common choke point.</p>"},{"location":"#why-exacheck","title":"Why ExaCheck","text":"<p>ExaBGP is packaged with its own health checking script (see here) however it has some limitations which make it not suitable for my requirements.</p> <p>The built in health check works fine for smaller environments where each service may be running its own instance of ExaBGP (so each instance of ExaBGP runs one or only a few processes) however for larger environments where health checks are centralized it becomes unmanageable.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>ExaCheck reads from a YAML or JSON configuration file containing the list of checks. By default, the configuration file will be loaded from <code>/etc/exabgp/exacheck.yaml</code>. If the configuration file extension is <code>json</code>, the file will be loaded as a JSON file rather than YAML.</p>"},{"location":"configuration/#base-structure","title":"Base Structure","text":"<p>A (minimal) configuration schema looks like this:</p> <pre><code>---\n\n# The list of health checks\nchecks:\n\n  - name: Example DNS Service\n    description: Perform a basic SOA query for example.com to 192.0.2.255. If the query returns a response, 192.0.2.255 would be advertised with BGP.\n    args:\n      method: dns\n      host: 192.0.2.255 # Note DNS queries are being sent to 192.0.2.255 which should be bound to loopback\n      query: example.com\n    prefixes:\n      - 192.0.2.255\n    nexthop: self\n\n# An optional list of notification targets\nnotifications:\n\n  - name: Microsoft Teams Example\n    description: This target will only receive route withdraw/announce events.\n    url: msteams://organisation/TokenA/TokenB/TokenC/\n</code></pre>"},{"location":"configuration/#configuration-keys","title":"Configuration Keys","text":"<p>The following top level configuration keys are available:</p> Key Type Default <code>exacheck</code> Dict undef <code>checks</code> List[Check] undef <code>logging</code> Optional List[LogMethods] undef <code>notifications</code> Optional List[Notifications] undef <code>sentry</code> Optional Dict undef"},{"location":"configuration/#exacheck","title":"ExaCheck","text":"<p>The <code>exacheck</code> key contains the various internal configuration for ExaCheck. Configuration to enable/disable live reloading and the monitoring interval can be adjusted using this key.</p> <p>For the list of available configuration options sett the ExaCheck internal configuration page.</p>"},{"location":"configuration/#checks","title":"Checks","text":"<p>The <code>checks</code> key contains a list of the health checks that should be executed. For the configuration of individual checks see the health checks configuration page.</p>"},{"location":"configuration/#logging","title":"Logging","text":"<p>The <code>logs</code> key contains a list of log targets. These may be file based or remote syslog (UDP/TCP) servers. For configuration options see the logging configuration page.</p>"},{"location":"configuration/#notifications","title":"Notifications","text":"<p>The <code>notifications</code> key contains a list of notification targets. See the notifications configuration page.</p>"},{"location":"configuration/#sentry","title":"Sentry","text":"<p>Sentry error reporting/profiling can be configured with the <code>sentry</code> key. See the Sentry configuration page.</p>"},{"location":"configuration/#validation","title":"Validation","text":"<p>The configuration file is validated using Pydantic. The configuration file is parsed into a dictionary from YAML or JSON which is then loaded into the Pydantic model.</p> <p>Validation is as strict as possible while also being safe - ExaCheck will not start if the configuration is invalid and live reloads are skipped if the configuration becomes invalid.</p>"},{"location":"configuration/#configuration-schema","title":"Configuration Schema","text":"<p>A JSON schema for the configuration is available in schema.json. Alternatively the schema can be generated by the command line interface directly.</p> <p>The JSON schema can be used by certain IDEs (VS Code as an example) to validate the configuration as you edit it. It can also be used to visualize the list of available options using a tool such as JSON Crack.</p>"},{"location":"configuration/#vs-code","title":"VS Code","text":"<p>If using VS Code with the YAML Language Server the following header may be set in the configuration file:</p> <pre><code>---\n# yaml-language-server: $schema=https://raw.githubusercontent.com/exacheck/exacheck/main/schema.json\n</code></pre>"},{"location":"configuration/exacheck/","title":"ExaCheck","text":"<p>The <code>exacheck</code> configuration key is used to control ExaCheck itself.</p>"},{"location":"configuration/exacheck/#configuration-keys","title":"Configuration Keys","text":"<p>The following configuration keys are available for ExaCheck:</p> Key Type Default <code>live_reload</code> Bool <code>False</code> <code>monitoring_interval</code> Float/Int <code>30</code>"},{"location":"configuration/exacheck/#live-reload","title":"Live Reload","text":"<p>Live configuration reloads may be enabled by setting <code>live_reload</code> to <code>True</code>.</p>"},{"location":"configuration/exacheck/#reload-behaviour","title":"Reload Behaviour","text":"<p>When enabled, during each <code>monitoring_interval</code> the master process will read the configuration and look for changes. If there are changes the new configuration will be validated. Should the configuration be invalid the reload will not proceed.</p> <p>If the configuration is valid any new health checks will be added and removed health checks will be terminated/withdrawn. If a health check is modified the route for that service will first be withdrawn and the health check process terminated. A new health check process will then be setup.</p>"},{"location":"configuration/exacheck/#live-reload-limitations","title":"Live Reload Limitations","text":"<p>Only the <code>checks</code> and <code>notifications</code> configuration keys support live reloading. Any other modified keys are ignored.</p>"},{"location":"configuration/exacheck/#monitoring-interval","title":"Monitoring Interval","text":"<p>The <code>monitoring_interval</code> option controls how often the master process checks for configuration modifications (if enabled) and that each health check process is running. If a health check process is terminated for some reason (eg. an unhandled exception) the master process will automatically respawn it at the next monitoring interval.</p> <p>The default value of <code>30</code> should be fine for most use cases. Note that this value is NOT how often a health check is executed; that is controlled at the health check level.</p>"},{"location":"configuration/exacheck/#examples","title":"Examples","text":"<p>To enable live reload and change the monitoring interval from the default <code>30</code> seconds:</p> <pre><code>---\n\n# ExaCheck internal configuration\nexacheck:\n    # Enable live configuration reloads\n    live_reload: true\n    # Monitor for configuration changes and verify the health check processes are running every 60 seconds\n    monitoring_interval: 60\n\n# The list of health checks\nchecks:\n    - ...\n</code></pre>"},{"location":"configuration/notifications/","title":"Notifications","text":"<p>Notifications may be configured to alert on route announce and withdraw events as well as other general information from the ExaCheck process. Notifications are handled by Apprise - a list of supported notification providers is listed on the Apprise Wiki.</p> <p>Multiple notification targets may be defined; as an example you may want alerts for a specific service to go to one notification service but alerts for other services to go somewhere else.</p>"},{"location":"configuration/notifications/#configuration-keys","title":"Configuration Keys","text":"<p>Notifications are configured as an array of <code>Notifications</code> objects. The following top level configuration keys are available for each object.</p> Key Type Default <code>name</code> String undef <code>description</code> Optional String undef <code>url</code> String undef <code>checks</code> Optional List[String] undef <code>events</code> List[String] <code>[\"announce\", \"error\", \"info\", \"withdraw\"]</code> <code>general_events</code> Boolean <code>False</code>"},{"location":"configuration/notifications/#name","title":"Name","text":"<p>The name for the notification target. The name is used for logging.</p>"},{"location":"configuration/notifications/#description","title":"Description","text":"<p>A description for the notification target. This is not used internally; it can just serve to make the configuration file more readable.</p>"},{"location":"configuration/notifications/#url","title":"URL","text":"<p>The notification target URL. The Apprise GitHub README.md includes a list of supported services and their URLs.</p>"},{"location":"configuration/notifications/#checks","title":"Checks","text":"<p>An optional list of check names for filtering. Only notifications for the supplied check names will be sent to the configured target.</p>"},{"location":"configuration/notifications/#events","title":"Events","text":"<p>A list of event types allowed to send notifications to this target. The list of supported events are:</p> <ul> <li><code>announce</code>: Route announcements.</li> <li><code>withdraw</code>: Route withdrawals.</li> <li><code>error</code>: General errors encountered. These events require the <code>general_events</code> flag to be set to <code>True</code>.</li> <li><code>info</code>: General information events. These events require the <code>general_events</code> flag to be set to <code>True</code>.</li> </ul>"},{"location":"configuration/notifications/#general-events","title":"General Events","text":"<p>Allow <code>info</code> and <code>error</code> events to be sent to the notification target. If set to <code>False</code> (the default) no <code>info</code> or <code>error</code> event messages will be sent.</p>"},{"location":"configuration/notifications/#examples","title":"Examples","text":"<p>The following are some examples of notification targets:</p> <pre><code>---\n\n# The list of notification targets\nnotifications:\n\n  - name: Microsoft Teams Example\n    description: This target will only receive route withdraw/announce events.\n    url: msteams://organisation/TokenA/TokenB/TokenC/\n\n  - name: Slack Example\n    description: This target will events only for the checks \"Example Check 1\" and \"Example Check 2\"\n    url: slack://TokenA/TokenB/TokenC/Channel\n    checks:\n      - Example Check 1\n      - Example Check 2\n\n# The list of health checks\nchecks:\n    - ...\n</code></pre>"},{"location":"configuration/sentry/","title":"Sentry","text":"<p>The reporting to Sentry using the <code>sentry-sdk</code> module can be configured with the <code>sentry</code> key. For more information about the below configuration keys, check the official Sentry basic options documentation.</p> <p>Note</p> <p>By default there is no dependancy on the <code>sentry-sdk</code> module; you must either install it separately or include the <code>sentry</code> extra while installing ExaCheck. As an example if using PyPi:</p> <pre><code>python3 -m pip install exacheck[sentry]\n</code></pre>"},{"location":"configuration/sentry/#configuration-keys","title":"Configuration Keys","text":"<p>The following configuration keys are available for Sentry:</p> Key Type Default <code>dsn</code> String undef <code>enabled</code> Bool <code>True</code> <code>sample_rate</code> Float <code>1.0</code> <code>profiles_sample_rate</code> Float <code>0.0</code> <code>attach_stacktrace</code> Bool <code>False</code> <code>include_local_variables</code> Bool <code>True</code> <code>debug</code> Bool <code>False</code>"},{"location":"configuration/sentry/#dsn","title":"DSN","text":"<p>The DSN provided by Sentry for reporting.</p>"},{"location":"configuration/sentry/#enabled","title":"Enabled","text":"<p>If Sentry should be sending reports to the specified DSN. You may set this to disabled if you would like to keep the Sentry configuration but temporarily disable it.</p>"},{"location":"configuration/sentry/#sample-rate","title":"Sample Rate","text":"<p>The rate at which events are sampled for Sentry.</p>"},{"location":"configuration/sentry/#profiles-sample-rate","title":"Profiles Sample Rate","text":"<p>The rate at which samples are taken for profiling. Defaults to <code>0.0</code> (not enabled).</p>"},{"location":"configuration/sentry/#attach-stacktrace","title":"Attach Stacktrace","text":"<p>Set <code>attach_stacktrace</code> to true to attach a stack trace to every event logged to Sentry. By default the stacktrace is only included for exceptions.</p>"},{"location":"configuration/sentry/#include-local-variables","title":"Include Local Variables","text":"<p>To include a snapshot of local variables in reports, set <code>include_local_variables</code> to <code>True</code> (the default).</p>"},{"location":"configuration/sentry/#debug","title":"Debug","text":"<p>To enable Sentry debug mode set <code>debug</code> to <code>True</code> (off by default). Sentry should then print helpful messages if there are issues sending events.</p>"},{"location":"configuration/sentry/#examples","title":"Examples","text":"<pre><code>---\n\n# Configure Sentry profiling/error reporting\nsentry:\n\n    # The Sentry DSN to send reports to\n    dsn: https://example@project.ingest.sentry.io/key\n\n    # The sample rate\n    sample_rate: 1.0\n\n# The list of health checks\nchecks:\n    - ...\n</code></pre>"},{"location":"configuration/health-checks/","title":"Health Checks","text":"<p>Health checks are the heart of ExaCheck; a list of health checks can be defined in the <code>checks</code> key.</p> <p>There are two categories of health checks:</p> <ul> <li>Local: Local checks are for scripts executed on the local machine or testing if a file exists/doesn't exist.</li> <li>Remote: Remote checks are anything that uses the network. This may be a HTTP request, DNS request etc. The remote checks have additional options not available to local checks.</li> </ul>"},{"location":"configuration/health-checks/#configuration-keys","title":"Configuration Keys","text":"<p>The following top level configuration keys apply to health checks.</p> Key Type Default <code>name</code> String undef <code>args</code> Dict undef <code>prefixes</code> List[IPNetwork] undef <code>nexthop</code> String <code>self</code> <code>interval</code> Integer/Float <code>15</code> <code>rise</code> Integer <code>3</code> <code>fall</code> Integer <code>3</code> <code>description</code> Optional String undef <code>path_id</code> Optional Integer/IPv4 Address undef <code>metric</code> Optional Integer undef <code>metric_down</code> Optional Integer undef <code>local_preference</code> Optional Integer undef <code>disable</code> Optional String undef <code>neighbors</code> Optional List[IPAddress] undef <code>communities</code> Optional List[String] undef <code>as_path</code> Optional String undef"},{"location":"configuration/health-checks/#name","title":"Name","text":"<p>The name of this health check. The name is used for logging purposes as well as optional filtering of logs/notifications.</p>"},{"location":"configuration/health-checks/#args","title":"Args","text":"<p>The <code>args</code> key contains the actual arguments for each health check. These are things such as the health check type and parameters for the service to be marked as up.</p> <p>Warning</p> <p>The <code>args</code> key must contain a <code>method</code> value. The method is used to configure which health check needs to run. The current list of available health check methods are:</p> Method Name Description <code>dns</code> Query a DNS server and optionally validate the response. <code>file</code> Test if a file path exists or doesn't exist. <code>http</code> Send HTTP or HTTPS requests and validate the response and/or SSL certificates. <code>icmp</code> Send ICMP ping requests and validate the latency is within an acceptable range. <code>ntp</code> NTP health check for time servers. <code>shell</code> Run the supplied script and validate the exit code returned is successful. <code>tcp</code> Validate a TCP connection can be opened to the supplied host/port. <p>Both local and remote health checks support the <code>timeout</code> key which defines the time limit for how long a check execution can take. This timeout prevents a health check being in a stuck condition; the check will be terminated if the timeout is reached. By default the timeout is set to 10 seconds.</p>"},{"location":"configuration/health-checks/#remote-check-args","title":"Remote Check Args","text":"<p>Remote health check methods (such as <code>http</code>, <code>icmp</code>, <code>dns</code>) support the following common args:</p> Key Type Default <code>host</code> String undef <code>address_family</code> Optional String undef <code>all_valid</code> Bool <code>False</code>"},{"location":"configuration/health-checks/#host","title":"Host","text":"<p>The <code>host</code> field contains the IP address or hostname that the health check should be executed against. If a hostname is supplied, each health check execution will perform a DNS resolution to ensure the current IP is used.</p> <p>As the hostname may resolve to multiple addresses and/or address families (eg. IPv4 and IPv6) the <code>address_family</code> and <code>all_valid</code> options can be used to control what happens in those situations.</p> <p>Warning</p> <p>If specifying a host name instead of an IP address, temporary DNS resolution errors will cause the health check to fail. Specify an IP address to avoid this behaviour.</p>"},{"location":"configuration/health-checks/#address-family","title":"Address Family","text":"<p>The <code>address_family</code> key is used when <code>host</code> is set to a hostname. Should the hostname resolve to an IPv4 and IPv6 address you may want the check to only be sent to a single address family rather than both.</p> <p>The values <code>ipv4</code> or <code>ipv6</code> are supported. If not defined there is no filtering for IPv4 or IPv6 addresses applied.</p>"},{"location":"configuration/health-checks/#all-valid","title":"All Valid","text":"<p>The <code>all_valid</code> key is used when <code>host</code> is set to a hostname. If the hostname resolves to multiple IP addresses and <code>all_valid</code> is set to <code>True</code>, the health check will be executed against all IP addresses available. Should the health check to any IP address fail the service will be marked as down.</p> <p>If set to the default <code>False</code> value a successful health check from any IP address is considered valid and the service will be marked up.</p>"},{"location":"configuration/health-checks/#prefixes","title":"Prefixes","text":"<p>The <code>prefixes</code> array contains the list of IP addresses or networks to advertise when the check is considered up. IPv4 or IPv6 addresses/networks may be defined. The addresses/networks must all be of the same address family; you cannot mix IPv4 and IPv6 in the same health check (instead you would define an IPv4 and IPv6 health check).</p> <p>Warning</p> <p>If the <code>nexthop</code> value is set to an IP address, the addresses/networks must be of the same address family.</p>"},{"location":"configuration/health-checks/#nexthop","title":"Nexthop","text":"<p>The <code>nexthop</code> attribute defines the next hop to advertise for the addresses/prefixes for the service. May be set to an IPv4 or IPv6 address or the value <code>self</code>.</p>"},{"location":"configuration/health-checks/#interval","title":"Interval","text":"<p>The <code>interval</code> value defines how often the health check is executed in seconds.</p>"},{"location":"configuration/health-checks/#rise","title":"Rise","text":"<p>The <code>rise</code> value defines how many health checks must be successful in a row before the service is considered as up.</p>"},{"location":"configuration/health-checks/#fall","title":"Fall","text":"<p>The <code>fall</code> value defines how many health checks must fail in a row before the service is considered as down.</p>"},{"location":"configuration/health-checks/#description","title":"Description","text":"<p>The <code>description</code> is an optional value which is not used by ExaCheck; you may enter a description to make the configuration easier to read.</p>"},{"location":"configuration/health-checks/#path-id","title":"Path ID","text":"<p>The <code>path_id</code> attribute can be used for handling of ECMP routes. If there is a single server running ExaCheck and there are two different health checks which advertise the same prefix, the path ID must be set to identify the route. If it is not defined it will result in unpredictable behaviour for announcements/withdrawals and ECMP may fail to work depending on the router vendor.</p>"},{"location":"configuration/health-checks/#metric","title":"Metric","text":"<p>If the <code>metric</code> value is set, routes will be advertised with this MED value.</p>"},{"location":"configuration/health-checks/#metric-down","title":"Metric Down","text":"<p>If the <code>metric_down</code> value is set, rather than withdrawing routes with failed health checks the route will be announced with the supplied metric.</p> <p>Danger</p> <p>This feature is currently not working.</p>"},{"location":"configuration/health-checks/#local-preference","title":"Local Preference","text":"<p>The <code>local_preference</code> value may be defined to advertise routes with a specific local preference.</p>"},{"location":"configuration/health-checks/#disable","title":"Disable","text":"<p>The <code>disable</code> key may be set to a path on the local host filesystem. If the file path exists it will result in the service being marked as down and the routes withdrawn.</p> <p>This can be used to take down a service manually by touching a file (eg. for maintenance).</p>"},{"location":"configuration/health-checks/#neighbors","title":"Neighbors","text":"<p>By default, ExaBGP will advertise the supplied route to all available neighbors. If you have multiple neighbors configured and you want to filter an advertisement to one or more specific neighbors only, set the <code>neighbors</code> attribute to a list of IP addresses.</p>"},{"location":"configuration/health-checks/#communities","title":"Communities","text":"<p>To add BGP communities to advertised routes set the <code>communities</code> attribute to a list of BGP community values.</p> <p>Regular, large and extended BGP communities are supported.</p>"},{"location":"configuration/health-checks/#as-path","title":"AS Path","text":"<p>To override the AS path of advertised routes you may set the <code>as_path value</code>.</p>"},{"location":"configuration/health-checks/#examples","title":"Examples","text":"<p>These are some configuration examples of some health checks.</p> <pre><code>---\n\n# Various example health checks\nchecks:\n\n  - name: Example DNS Service\n    description: Perform a basic SOA query for example.com to 192.0.2.255. If the query returns a response, 192.0.2.255 would be advertised with BGP.\n    args:\n      method: dns\n      host: 192.0.2.255 # Note DNS queries are being sent to 192.0.2.255 which should be bound to loopback\n      query: example.com\n    prefixes:\n      - 192.0.2.255\n    nexthop: self\n\n  - name: Example Basic ICMP Check\n    description: Ensure that the IP 8.8.8.8 responds to ICMP ping requests\n    args:\n      method: icmp\n      host: 8.8.8.8\n    prefixes:\n      - 192.0.2.255\n    nexthop: self\n\n  - name: Example file exists check\n    description: Verify that the file path \"/var/run/exists\" exists\n    args:\n      method: file\n      path: /var/run/exists\n    prefixes:\n      - 192.0.2.255\n    nexthop: self\n\n  - name: Example Basic Shell Check\n    description: Run the command \"true\" (will always return exit code 0)\n    args:\n      method: shell\n      command: true\n    prefixes:\n      - 192.0.2.255\n    nexthop: self\n</code></pre>"},{"location":"configuration/health-checks/dns/","title":"DNS","text":"<p>The <code>dns</code> health check allows you to query a DNS server to ensure that it responds. Optionally, the response can be validated (eg. to ensure a certain IP address is contained within the response).</p>"},{"location":"configuration/health-checks/dns/#configuration-keys","title":"Configuration Keys","text":"<p>The following configuration options apply to the DNS health check method:</p> Key Type Default <code>query</code> String undef <code>query_type</code> String <code>soa</code> <code>response</code> Optional Pattern undef <code>tcp</code> Bool <code>False</code> <code>port</code> Integer <code>53</code> <code>dns_timeout</code> Integer/Float <code>5</code> <code>require_resolve</code> Bool <code>True</code>"},{"location":"configuration/health-checks/dns/#remote-check-options","title":"Remote Check Options","text":"<p>As this is a remote check, the following additional options are supported:</p> Key Type Default <code>host</code> String undef <code>address_family</code> Optional String undef <code>all_valid</code> Bool <code>False</code>"},{"location":"configuration/health-checks/dns/#host","title":"Host","text":"<p>The <code>host</code> field contains the IP address or hostname that the health check should be executed against. If a hostname is supplied, each health check execution will perform a DNS resolution to ensure the current IP is used.</p> <p>As the hostname may resolve to multiple addresses and/or address families (eg. IPv4 and IPv6) the <code>address_family</code> and <code>all_valid</code> options can be used to control what happens in those situations.</p> <p>Warning</p> <p>If specifying a host name instead of an IP address, temporary DNS resolution errors will cause the health check to fail. Specify an IP address to avoid this behaviour.</p>"},{"location":"configuration/health-checks/dns/#address-family","title":"Address Family","text":"<p>The <code>address_family</code> key is used when <code>host</code> is set to a hostname. Should the hostname resolve to an IPv4 and IPv6 address you may want the check to only be sent to a single address family rather than both.</p> <p>The values <code>ipv4</code> or <code>ipv6</code> are supported. If not defined there is no filtering for IPv4 or IPv6 addresses applied.</p>"},{"location":"configuration/health-checks/dns/#all-valid","title":"All Valid","text":"<p>The <code>all_valid</code> key is used when <code>host</code> is set to a hostname. If the hostname resolves to multiple IP addresses and <code>all_valid</code> is set to <code>True</code>, the health check will be executed against all IP addresses available. Should the health check to any IP address fail the service will be marked as down.</p> <p>If set to the default <code>False</code> value a successful health check from any IP address is considered valid and the service will be marked up.</p>"},{"location":"configuration/health-checks/dns/#query","title":"Query","text":"<p>The <code>query</code> field defines the name for the DNS query. By default, a <code>soa</code> query will be sent; combined with the <code>query_type</code> option you may query record types other than <code>soa</code>.</p>"},{"location":"configuration/health-checks/dns/#query-type","title":"Query Type","text":"<p>The <code>query_type</code> field defines the type of DNS query to send. Valid options are:</p> <ul> <li><code>a</code></li> <li><code>aaaa</code></li> <li><code>any</code></li> <li><code>cname</code></li> <li><code>mx</code></li> <li><code>ns</code></li> <li><code>ptr</code></li> <li><code>soa</code></li> <li><code>srv</code></li> <li><code>txt</code></li> </ul> <p>The <code>soa</code> query type is used by default.</p>"},{"location":"configuration/health-checks/dns/#response","title":"Response","text":"<p>The <code>response</code> field can define a regex/pattern of valid responses. As an example, you may want to verify that a certain IP address is returned in the response.</p>"},{"location":"configuration/health-checks/dns/#tcp","title":"TCP","text":"<p>By default DNS queries are sent using UDP; to use TCP instead set the <code>tcp</code> option to <code>True</code>.</p>"},{"location":"configuration/health-checks/dns/#port","title":"Port","text":"<p>The <code>port</code> option can be used to send DNS queries to an alternative port other than <code>53</code>.</p>"},{"location":"configuration/health-checks/dns/#dns-timeout","title":"DNS Timeout","text":"<p>A 5 second timeout is applied to DNS queries; you may raise or lower the <code>timeout</code> value if required.</p>"},{"location":"configuration/health-checks/dns/#require-resolve","title":"Require Resolve","text":"<p>The <code>require_resolve</code> option can be disabled to allow any type of DNS response including NXDOMAIN. If set to the default value of <code>True</code>, responses from the DNS server must return a valid result.</p>"},{"location":"configuration/health-checks/dns/#examples","title":"Examples","text":"<p>Some examples of DNS health checks:</p> BasicCNAMEIP Regex <p>A basic configuration:</p> <pre><code>---\n\n# The list of health checks\nchecks:\n\n  - name: Example DNS Service\n    description: Perform a basic SOA query for example.com to 192.0.2.255. If the query returns a response, 192.0.2.255 would be advertised with BGP.\n    args:\n      method: dns\n      host: 192.0.2.255 # Note DNS queries are being sent to 192.0.2.255 which should be bound to loopback\n      query: example.com\n    prefixes:\n      - 192.0.2.255\n    nexthop: self\n</code></pre> <p>To validate a CNAME record contains expected content:</p> <pre><code>---\n\n# The list of health checks\nchecks:\n\n  - name: Example DNS CNAME Test\n    description: Perform a CNAME query for www.example.com to 192.0.2.1 and verify the CNAME target contains the word \"example\"\n    args:\n      method: dns\n      host: 192.0.2.1\n      query: www.example.com\n      type: cname\n      pattern: example\n    prefixes:\n      - 192.0.2.253\n    nexthop: self\n</code></pre> <p>To send a <code>A</code> query to a name server and validate the returned IP address with a regex:</p> <pre><code>---\n\n# The list of health checks\nchecks:\n\n  - name: DNS query with IP regex and neighbor filtering\n    description: &gt;\n      Send an A query for \"example.com\" to 192.0.2.1 and ensure the response contains the IP address 192.0.2.250 using a regex.\n      The routes to advertise will be filtered to specific neighbors.\n    args:\n      method: dns\n      host: 192.0.2.1\n      query: example.com\n      query_type: a\n      response: ^192\\.0\\.2\\.250$\n    nexthop: 192.168.0.3\n    prefixes:\n      - 192.0.2.2\n      - 192.0.2.3\n    neighbors:\n      - 192.0.2.230\n      - 192.0.2.231\n      - 192.0.2.232\n</code></pre>"},{"location":"configuration/health-checks/file/","title":"File","text":"<p>The <code>file</code> health check can verify that either a file exists or doesn't exist.</p>"},{"location":"configuration/health-checks/file/#configuration-keys","title":"Configuration Keys","text":"<p>The following configuration options apply to the file health check method:</p> Key Type Default <code>path</code> String undef <code>exists</code> Bool <code>True</code>"},{"location":"configuration/health-checks/file/#path","title":"Path","text":"<p>The path to the file to test for.</p>"},{"location":"configuration/health-checks/file/#exists","title":"Exists","text":"<p>If <code>exists</code> is set to <code>True</code> (the default), the file path must exist for the health check to return success. If set to <code>False</code>, the file path must not exist for the health check to return success.</p>"},{"location":"configuration/health-checks/file/#examples","title":"Examples","text":"<p>These are some configuration examples for the file health check:</p> File ExistsFile Does Not Exist <p>To verify that a file exists:</p> <pre><code>---\n\n# The list of health checks\nchecks:\n\n  - name: Example file exists check\n    description: Verify that the file path \"/var/run/exists\" exists\n    args:\n      method: file\n      path: /var/run/exists\n    prefixes:\n      - 192.0.2.255\n    nexthop: self\n</code></pre> <p>To verify that a file does not exist:</p> <pre><code>---\n\n# The list of health checks\nchecks:\n\n  - name: Example file does not exist check\n    description: Verify that the file path \"/var/run/not-existing\" does not exist\n    args:\n      method: file\n      path: /var/run/not-existing\n      exists: false\n    prefixes:\n      - 2001:db8::/64\n    nexthop: self\n</code></pre>"},{"location":"configuration/health-checks/http/","title":"HTTP","text":"<p>The <code>http</code> health check allows you to perform HTTP/HTTPS requests to a web server. To verify the service is working correctly there are options to send POST data, validate the response code, testing the response content and validating the SSL.</p>"},{"location":"configuration/health-checks/http/#configuration-keys","title":"Configuration Keys","text":"<p>The following configuration options apply to the HTTP health check method:</p> Key Type Default <code>url</code> String undef <code>response</code> Optional Pattern undef <code>expected_status</code> Optional Integer undef <code>require_status</code> Bool <code>True</code> <code>http_timeout</code> Integer <code>5</code> <code>user_agent</code> String <code>ExaCheck HTTP Health Check [v&lt;version&gt;]</code> <code>headers</code> Optional Dict undef <code>verify_ssl</code> Bool <code>False</code> <code>request_method</code> String <code>GET</code> <code>data</code> Optional Dict undef <code>http2</code> Bool <code>False</code>"},{"location":"configuration/health-checks/http/#remote-check-options","title":"Remote Check Options","text":"<p>As this is a remote check, the following additional options are supported:</p> Key Type Default <code>host</code> String undef <code>address_family</code> Optional String undef <code>all_valid</code> Bool <code>False</code>"},{"location":"configuration/health-checks/http/#host","title":"Host","text":"<p>The <code>host</code> field contains the IP address or hostname that the health check should be executed against. If a hostname is supplied, each health check execution will perform a DNS resolution to ensure the current IP is used.</p> <p>As the hostname may resolve to multiple addresses and/or address families (eg. IPv4 and IPv6) the <code>address_family</code> and <code>all_valid</code> options can be used to control what happens in those situations.</p> <p>Warning</p> <p>If specifying a host name instead of an IP address, temporary DNS resolution errors will cause the health check to fail. Specify an IP address to avoid this behaviour.</p>"},{"location":"configuration/health-checks/http/#address-family","title":"Address Family","text":"<p>The <code>address_family</code> key is used when <code>host</code> is set to a hostname. Should the hostname resolve to an IPv4 and IPv6 address you may want the check to only be sent to a single address family rather than both.</p> <p>The values <code>ipv4</code> or <code>ipv6</code> are supported. If not defined there is no filtering for IPv4 or IPv6 addresses applied.</p>"},{"location":"configuration/health-checks/http/#all-valid","title":"All Valid","text":"<p>The <code>all_valid</code> key is used when <code>host</code> is set to a hostname. If the hostname resolves to multiple IP addresses and <code>all_valid</code> is set to <code>True</code>, the health check will be executed against all IP addresses available. Should the health check to any IP address fail the service will be marked as down.</p> <p>If set to the default <code>False</code> value a successful health check from any IP address is considered valid and the service will be marked up.</p>"},{"location":"configuration/health-checks/http/#url","title":"URL","text":"<p>The full URL to request from the web server. The actual HTTP request is sent to the web server defined in the <code>host</code> variable with the host header in the HTTP request being set to the value from the URL.</p> <p>HTTPS requests are configured to use SNI automatically if the URL to check is a hostname.</p> <p>If basic authentication is required the username/password can be added to the URL (eg. <code>http://user:password@example.com</code>) or the <code>headers</code> option can be used.</p>"},{"location":"configuration/health-checks/http/#response","title":"Response","text":"<p>The <code>response</code> value may be set to a pattern to match the content returned from the web server. If not set (the default) no checks are performed on the actual content returned by the web server.</p>"},{"location":"configuration/health-checks/http/#expected-status","title":"Expected Status","text":"<p>The <code>expected_status</code> code may be set to ensure that the web server responds with a specific HTTP status code. In some cases you may want to validate the web server responds with a specific status code (eg. <code>301</code>) and not just a <code>200</code>.</p>"},{"location":"configuration/health-checks/http/#require-status","title":"Require Status","text":"<p>When the <code>require_status</code> option is set to <code>True</code> (the default), the HTTP response code must indicate that the request was successful. If <code>expected_status</code> is set to a non-successful response code this setting is overridden.</p>"},{"location":"configuration/health-checks/http/#http-timeout","title":"HTTP Timeout","text":"<p>The <code>http_timeout</code> option determines how long the HTTP request is allowed to wait for a response.</p>"},{"location":"configuration/health-checks/http/#user-agent","title":"User Agent","text":"<p>The default user agent header can be overridden by setting the <code>user_agent</code> value to a custom value.</p>"},{"location":"configuration/health-checks/http/#headers","title":"Headers","text":"<p>If additional headers are required to be sent with the HTTP request a dict of the headers may be provided. As an example:</p> <pre><code>      headers:\n        Example-Header: Example-Data\n        Another-Header: More-Data\n</code></pre>"},{"location":"configuration/health-checks/http/#verify-ssl","title":"Verify SSL","text":"<p>Set <code>verify_ssl</code> to <code>True</code> to validate that the SSL certificate is trusted by the systems certificate store.</p>"},{"location":"configuration/health-checks/http/#request-method","title":"Request Method","text":"<p>By default the HTTP check will make a <code>GET</code> request to the web server. The <code>request_method</code> may be set to one of the following values:</p> <ul> <li><code>GET</code></li> <li><code>POST</code></li> <li><code>PUT</code></li> <li><code>DELETE</code></li> <li><code>HEAD</code></li> <li><code>OPTIONS</code></li> </ul>"},{"location":"configuration/health-checks/http/#data","title":"Data","text":"<p>If the <code>request_method</code> is set to a value that allows data to be included (eg. <code>POST</code> requests), a dict of data can be set. As an example:</p> <pre><code>      request_method: POST\n      data:\n        field1: example\n        field2: another example\n</code></pre>"},{"location":"configuration/health-checks/http/#http2","title":"HTTP2","text":"<p>The <code>http2</code> bool can be set to <code>True</code> to allow HTTP2 to be used (if supported by the server) for the request. If the server does not support HTTP2 the request will proceed as normal as a HTTP1 request.</p>"},{"location":"configuration/health-checks/http/#examples","title":"Examples","text":"<p>Some examples of HTTP health checks:</p> BasicDNS NameBasic AuthenticationPOST Data <p>A basic configuration:</p> <pre><code>---\n\n# The list of health checks\nchecks:\n\n  - name: Example Basic HTTP Check\n    description: Perform a HTTP request to the web server and verify a successful response code is received\n    args:\n      method: http\n      host: 127.0.0.1\n      url: https://example.com\n    prefixes:\n      - 192.0.2.255\n    nexthop: self\n</code></pre> <p>A basic configuration using a hostname as the <code>host</code> to connect to:</p> <pre><code>---\n\n# The list of health checks\nchecks:\n\n  - name: Example Basic HTTP Check\n    description: &gt;\n      Perform a HTTP request to example.com. The IPv4 address for example.com will be resolved.\n      If there are multiple IP addresses available, a response from any is considered successful.\n    args:\n      method: http\n      host: example.com\n      url: https://example.com\n      address_family: ipv4\n      all_valid: false\n    prefixes:\n      - 192.0.2.255\n    nexthop: self\n</code></pre> <p>A HTTP check that requires basic authentication:</p> <pre><code>---\n\n# The list of health checks\nchecks:\n\n  - name: Example HTTP Check with Authentication\n    description: Perform a HTTP request which requires basic authentication\n    args:\n      method: http\n      host: 127.0.0.1\n      url: https://user:password@example.com\n      verify_ssl: true\n      expected_status: 200\n    prefixes:\n      - 2001:db8::ffff/128\n    nexthop: self\n</code></pre> <p>A HTTP check which includes POST data:</p> <pre><code>---\n\n# The list of health checks\nchecks:\n\n  - name: Example HTTP Check with POST data\n    description: Send a HTTP POST request to a web server\n    args:\n      method: http\n      host: 192.0.2.50\n      url: https://www.example.com/submit.php\n      verify_ssl: true\n      request_method: POST\n      data:\n        field1: First field of data\n        field2: Another field of data\n    prefixes:\n      - 192.0.2.240/32\n      - 192.0.2.0/29\n    nexthop: 192.0.2.50\n</code></pre>"},{"location":"configuration/health-checks/icmp/","title":"ICMP","text":"<p>The <code>icmp</code> health check is used to validate that a host responds to ICMP ping requests. The number of ping requests, the interval between the requests and maximum jitter/latency/loss values may be defined.</p>"},{"location":"configuration/health-checks/icmp/#configuration-keys","title":"Configuration Keys","text":"<p>The following configuration options apply to the ICMP health check method:</p> Key Type Default <code>count</code> Integer <code>3</code> <code>interval</code> Integer/Float <code>0.25</code> <code>icmp_timeout</code> Integer/Float <code>2</code> <code>privileged</code> Bool <code>False</code> <code>max_loss</code> Integer <code>0</code> <code>max_latency</code> Optional Integer/Float undef <code>max_jitter</code> Optional Integer/Float undef"},{"location":"configuration/health-checks/icmp/#remote-check-options","title":"Remote Check Options","text":"<p>As this is a remote check, the following additional options are supported:</p> Key Type Default <code>host</code> String undef <code>address_family</code> Optional String undef <code>all_valid</code> Bool <code>False</code>"},{"location":"configuration/health-checks/icmp/#host","title":"Host","text":"<p>The <code>host</code> field contains the IP address or hostname that the health check should be executed against. If a hostname is supplied, each health check execution will perform a DNS resolution to ensure the current IP is used.</p> <p>As the hostname may resolve to multiple addresses and/or address families (eg. IPv4 and IPv6) the <code>address_family</code> and <code>all_valid</code> options can be used to control what happens in those situations.</p> <p>Warning</p> <p>If specifying a host name instead of an IP address, temporary DNS resolution errors will cause the health check to fail. Specify an IP address to avoid this behaviour.</p>"},{"location":"configuration/health-checks/icmp/#address-family","title":"Address Family","text":"<p>The <code>address_family</code> key is used when <code>host</code> is set to a hostname. Should the hostname resolve to an IPv4 and IPv6 address you may want the check to only be sent to a single address family rather than both.</p> <p>The values <code>ipv4</code> or <code>ipv6</code> are supported. If not defined there is no filtering for IPv4 or IPv6 addresses applied.</p>"},{"location":"configuration/health-checks/icmp/#all-valid","title":"All Valid","text":"<p>The <code>all_valid</code> key is used when <code>host</code> is set to a hostname. If the hostname resolves to multiple IP addresses and <code>all_valid</code> is set to <code>True</code>, the health check will be executed against all IP addresses available. Should the health check to any IP address fail the service will be marked as down.</p> <p>If set to the default <code>False</code> value a successful health check from any IP address is considered valid and the service will be marked up.</p>"},{"location":"configuration/health-checks/icmp/#count","title":"Count","text":"<p>By default, 3 ping requests will be sent. The <code>count</code> value may be changed should you want more/less requests.</p>"},{"location":"configuration/health-checks/icmp/#interval","title":"Interval","text":"<p>The <code>interval</code> value sets the delay being subsequent ping requests.</p>"},{"location":"configuration/health-checks/icmp/#icmp-timeout","title":"ICMP Timeout","text":"<p>To limit the potential response time for individual ICMP requests the <code>icmp_timeout</code> is used. The timeout value must be lower than the health checks <code>timeout</code> value * <code>count</code>.</p>"},{"location":"configuration/health-checks/icmp/#privileged","title":"Privileged","text":"<p>If set to <code>False</code> (the default), the Python module is used to generate the ICMP packets. If set to <code>True</code> the kernel will be used instead. For more information see the icmplib root privileges page on GitHub.</p>"},{"location":"configuration/health-checks/icmp/#max-loss","title":"Max Loss","text":"<p>The <code>max_loss</code> option can be adjusted to allow for packet loss. The default value of <code>0</code> means no responses may be lost.</p>"},{"location":"configuration/health-checks/icmp/#max-latency","title":"Max Latency","text":"<p>If the <code>max_latency</code> option is set, ping responses must be received within the supplied amount of milliseconds.</p>"},{"location":"configuration/health-checks/icmp/#max-jitter","title":"Max Jitter","text":"<p>If the <code>max_jitter</code> option is set, the jitter between the ping responses must be within the supplied number of milliseconds.</p>"},{"location":"configuration/health-checks/icmp/#examples","title":"Examples","text":"<p>Some examples of ICMP health checks:</p> BasicLatencyPacket Loss Allowed <p>A basic configuration:</p> <pre><code>---\n\n# The list of health checks\nchecks:\n\n  - name: Example Basic ICMP Check\n    description: Ensure that the IP 8.8.8.8 responds to ICMP ping requests\n    args:\n      method: icmp\n      host: 8.8.8.8\n    prefixes:\n      - 192.0.2.255\n    nexthop: self\n</code></pre> <p>To validate that latency is within 20ms across 5 pings:</p> <pre><code>---\n\n# The list of health checks\nchecks:\n\n  - name: Example ICMP Latency Check\n    description: Ensure that ICMP ping requests to the IP 192.0.2.1 have a latency below 20ms across 5 pings\n    args:\n      method: icmp\n      host: 192.0.2.1\n      count: 5\n      max_latency: 20\n    prefixes:\n      - 192.0.2.5\n    nexthop: 192.0.2.254\n</code></pre> <p>To validate that latency is within 250ms and allow up to 50% packet loss:</p> <pre><code>---\n\n# The list of health checks\nchecks:\n\n  - name: Example ICMP Latency + Packet Loss Check\n    description: Ensure that ICMP ping requests to the IP 2001:db8:ffff::5 have a latency below 250ms but allow up to 50% packet loss\n    args:\n      method: icmp\n      host: 2001:db8:ffff::5\n      count: 4\n      max_latency: 250\n      max_loss: 2\n    prefixes:\n      - 2001:db8:a::/64\n    nexthop: self\n</code></pre>"},{"location":"configuration/health-checks/ntp/","title":"NTP","text":"<p>The <code>ntp</code> health check will send a NTP query and optionally validate that the server offset and stratum value is within the supplied parameters.</p>"},{"location":"configuration/health-checks/ntp/#configuration-keys","title":"Configuration Keys","text":"<p>The following configuration options apply to the NTP health check method:</p> Key Type Default <code>port</code> Integer <code>123</code> <code>version</code> Integer <code>2</code> <code>ntp_timeout</code> Integer/Float <code>5</code> <code>max_offset</code> Optional Integer/Float undef <code>max_stratum</code> Optional Integer undef"},{"location":"configuration/health-checks/ntp/#remote-check-options","title":"Remote Check Options","text":"<p>As this is a remote check, the following additional options are supported:</p> Key Type Default <code>host</code> String undef <code>address_family</code> Optional String undef <code>all_valid</code> Bool <code>False</code>"},{"location":"configuration/health-checks/ntp/#host","title":"Host","text":"<p>The <code>host</code> field contains the IP address or hostname that the health check should be executed against. If a hostname is supplied, each health check execution will perform a DNS resolution to ensure the current IP is used.</p> <p>As the hostname may resolve to multiple addresses and/or address families (eg. IPv4 and IPv6) the <code>address_family</code> and <code>all_valid</code> options can be used to control what happens in those situations.</p> <p>Warning</p> <p>If specifying a host name instead of an IP address, temporary DNS resolution errors will cause the health check to fail. Specify an IP address to avoid this behaviour.</p>"},{"location":"configuration/health-checks/ntp/#address-family","title":"Address Family","text":"<p>The <code>address_family</code> key is used when <code>host</code> is set to a hostname. Should the hostname resolve to an IPv4 and IPv6 address you may want the check to only be sent to a single address family rather than both.</p> <p>The values <code>ipv4</code> or <code>ipv6</code> are supported. If not defined there is no filtering for IPv4 or IPv6 addresses applied.</p>"},{"location":"configuration/health-checks/ntp/#all-valid","title":"All Valid","text":"<p>The <code>all_valid</code> key is used when <code>host</code> is set to a hostname. If the hostname resolves to multiple IP addresses and <code>all_valid</code> is set to <code>True</code>, the health check will be executed against all IP addresses available. Should the health check to any IP address fail the service will be marked as down.</p> <p>If set to the default <code>False</code> value a successful health check from any IP address is considered valid and the service will be marked up.</p>"},{"location":"configuration/health-checks/ntp/#port","title":"Port","text":"<p>By default, the <code>port</code> value is set to the well known port value <code>123</code>. If the NTP server is listening on a different port change this port to match.</p>"},{"location":"configuration/health-checks/ntp/#version","title":"Version","text":"<p>Version 2 NTP queries are sent by default for the health check. Support <code>version</code> values are:</p> <ul> <li><code>2</code></li> <li><code>3</code></li> </ul>"},{"location":"configuration/health-checks/ntp/#ntp-timeout","title":"NTP Timeout","text":"<p>The <code>ntp_timeout</code> option determines how long the NTP request is allowed to wait for a response.</p>"},{"location":"configuration/health-checks/ntp/#max-offset","title":"Max Offset","text":"<p>The <code>max_offset</code> value can be used to ensure the time contained within the NTP response is within a certain offset.</p>"},{"location":"configuration/health-checks/ntp/#max-stratum","title":"Max Stratum","text":"<p>The <code>max_stratum</code> value can be used to ensure the NTP server is within a certain stratum value. Valid options are integers between <code>1</code> to <code>15</code>.</p>"},{"location":"configuration/health-checks/ntp/#examples","title":"Examples","text":"<p>These are some configuration examples for the NTP health check:</p> Basic QueryNTP Stratum <p>To send a NTP query and validate there is a response:</p> <pre><code>---\n\n# The list of health checks\nchecks:\n\n  - name: Example Basic NTP Check\n    description: Ensure that the IP 192.0.2.123 responds to NTP queries\n    args:\n      method: ntp\n      host: 192.0.2.123\n    prefixes:\n      - 192.0.2.255\n    nexthop: self\n</code></pre> <p>To ensure the NTP server is at least stratum 2:</p> <pre><code>---\n\n# The list of health checks\nchecks:\n\n  - name: Example NTP Stratum Check\n    description: Ensure that the IP 2001:db8::123 responds to NTP queries and the server is at least stratum 2\n    args:\n      method: ntp\n      host: 2001:db8::123\n      max_stratum: 2\n    prefixes:\n      - 2001:db8:aaaa::ffff/128\n      - 2001:db8:aaaa::123/128\n    nexthop: self\n</code></pre>"},{"location":"configuration/health-checks/shell/","title":"Shell","text":"<p>The <code>shell</code> health check allows you to run a command and validate the response code is expected. This check method can be used to run your own custom scripted health checks easily.</p>"},{"location":"configuration/health-checks/shell/#configuration-keys","title":"Configuration Keys","text":"<p>The following configuration options apply to the file health check method:</p> Key Type Default <code>command</code> String undef <code>environment</code> Optional Dict undef"},{"location":"configuration/health-checks/shell/#command","title":"Command","text":"<p>The <code>command</code> needs to be set to the command that should be executed.</p>"},{"location":"configuration/health-checks/shell/#environment","title":"Environment","text":"<p>The <code>environment</code> parameter can be used to set custom environment variables used by the script/command that needs to be executed. The variables should be specified as key/values.</p>"},{"location":"configuration/health-checks/shell/#examples","title":"Examples","text":"<p>Some examples of shell health checks:</p> BasicEnvironment Variables <p>A basic configuration:</p> <pre><code>---\n\n# The list of health checks\nchecks:\n\n  - name: Example Basic Shell Check\n    description: Run the command \"true\" (will always return exit code 0)\n    args:\n      method: shell\n      command: true\n    prefixes:\n      - 192.0.2.255\n    nexthop: self\n</code></pre> <p>An example of running a script with environment variables:</p> <pre><code>---\n\n# The list of health checks\nchecks:\n\n  - name: Example Script With Environment Variables\n    description: Run a script with environment variables\n    args:\n      method: shell\n      command: /path/to/script.py\n      environment:\n        EXAMPLE: example environment variable 1\n    prefixes:\n      - 192.0.2.230\n    nexthop: 192.0.2.1\n</code></pre>"},{"location":"configuration/health-checks/tcp/","title":"TCP","text":"<p>The <code>tcp</code> health check is used to open a TCP connection to the supplied host/port. No data is sent over the connection; the test is only to validate that the port can be connected to.</p>"},{"location":"configuration/health-checks/tcp/#configuration-keys","title":"Configuration Keys","text":"<p>The following configuration options apply to the DNS health check method:</p> Key Type Default <code>port</code> Integer undef <code>tcp_timeout</code> Integer <code>5</code>"},{"location":"configuration/health-checks/tcp/#remote-check-options","title":"Remote Check Options","text":"<p>As this is a remote check, the following additional options are supported:</p> Key Type Default <code>host</code> String undef <code>address_family</code> Optional String undef <code>all_valid</code> Bool <code>False</code>"},{"location":"configuration/health-checks/tcp/#host","title":"Host","text":"<p>The <code>host</code> field contains the IP address or hostname that the health check should be executed against. If a hostname is supplied, each health check execution will perform a DNS resolution to ensure the current IP is used.</p> <p>As the hostname may resolve to multiple addresses and/or address families (eg. IPv4 and IPv6) the <code>address_family</code> and <code>all_valid</code> options can be used to control what happens in those situations.</p> <p>Warning</p> <p>If specifying a host name instead of an IP address, temporary DNS resolution errors will cause the health check to fail. Specify an IP address to avoid this behaviour.</p>"},{"location":"configuration/health-checks/tcp/#address-family","title":"Address Family","text":"<p>The <code>address_family</code> key is used when <code>host</code> is set to a hostname. Should the hostname resolve to an IPv4 and IPv6 address you may want the check to only be sent to a single address family rather than both.</p> <p>The values <code>ipv4</code> or <code>ipv6</code> are supported. If not defined there is no filtering for IPv4 or IPv6 addresses applied.</p>"},{"location":"configuration/health-checks/tcp/#all-valid","title":"All Valid","text":"<p>The <code>all_valid</code> key is used when <code>host</code> is set to a hostname. If the hostname resolves to multiple IP addresses and <code>all_valid</code> is set to <code>True</code>, the health check will be executed against all IP addresses available. Should the health check to any IP address fail the service will be marked as down.</p> <p>If set to the default <code>False</code> value a successful health check from any IP address is considered valid and the service will be marked up.</p>"},{"location":"configuration/health-checks/tcp/#port","title":"Port","text":"<p>The <code>port</code> value defines which port the connection should be made to.</p>"},{"location":"configuration/health-checks/tcp/#tcp-timeout","title":"TCP Timeout","text":"<p>The <code>tcp_timeout</code> controls the timeout for opening the TCP connection.</p>"},{"location":"configuration/health-checks/tcp/#examples","title":"Examples","text":"<p>An example TCP check:</p> <pre><code>---\n\n# The list of health checks\nchecks:\n\n  - name: Example TCP Check\n    description: Ensure that the IP 192.0.2.80 responds on port 80\n    args:\n      method: tcp\n      host: 192.0.2.80\n      port: 80\n    prefixes:\n      - 192.0.2.0/29\n    nexthop: self\n</code></pre>"},{"location":"configuration/logging/","title":"Logging","text":"<p>By default, logs are only sent to STDOUT. Optionally logs may be sent to one or more log files or syslog servers.</p> <p>Logs to each defined target can be filtered - you may want to log certain health check events to a log file and other events to a remote syslog server. You may also define different log levels per log target.</p>"},{"location":"configuration/logging/#configuration-keys","title":"Configuration Keys","text":"<p>Logging is configured as an array of <code>LogMethods</code> objects. The following top level configuration keys are available for each object and apply to both file and syslog targets:</p> Key Type Default <code>method</code> String <code>info</code> <code>level</code> String <code>info</code> <code>formatter</code> Optional String undef <code>events</code> String <code>[\"announce\", \"error\", \"info\", \"withdraw\"]</code> <code>subsystems</code> List[String] <code>[\"announcer\", \"configuration\", \"executor\", \"healthcheck\", \"logging\", \"master\", \"notification\", \"utility\", \"worker\"]</code> <code>checks</code> Optional List[String] undef"},{"location":"configuration/logging/#method","title":"Method","text":"<p>These log methods are supported:</p> <ul> <li><code>file</code>: Log to a file.</li> <li><code>syslog</code>: Log to a remote syslog server with UDP or TCP.</li> </ul> <p>Warning</p> <p>You MUST add the method specific configuration noted below otherwise the configuration will be invalid.</p>"},{"location":"configuration/logging/#method-specific-configuration","title":"Method Specific Configuration","text":"<p>The file and syslog methods require specific configuration. Check the relevant page depending on the log method:</p> <ul> <li>File Logging</li> <li>Syslog Logging</li> </ul>"},{"location":"configuration/logging/#level","title":"Level","text":"<p>The level of messages to send to the logging target. Available options are:</p> <ul> <li><code>error</code></li> <li><code>warning</code></li> <li><code>info</code></li> <li><code>success</code></li> <li><code>debug</code></li> <li><code>trace</code></li> </ul>"},{"location":"configuration/logging/#formatter","title":"Formatter","text":"<p>A custom log format string can be provided if you need to change the formatting. As an example, the default log format for STDERR logs is:</p> <pre><code>&lt;green&gt;{time:YYYY-MM-DD HH:mm:ss.SSS}&lt;/green&gt; | &lt;level&gt;{level: &lt;8}&lt;/level&gt; | &lt;light-blue&gt;PID {process: &lt;8}&lt;/light-blue&gt; | &lt;magenta&gt;{file.path}:{line} {function}()&lt;/magenta&gt; | &lt;cyan&gt;{extra[check_name]}&lt;/cyan&gt; | &lt;green&gt;{extra[subsystem]}/{extra[event]}&lt;/green&gt; | &lt;level&gt;{message}&lt;/level&gt;\n</code></pre>"},{"location":"configuration/logging/#events","title":"Events","text":"<p>The list of events that may be logged for this target. The following events are supported:</p> <ul> <li><code>announce</code>: Route announcements</li> <li><code>withdraw</code>: Route withdrawals</li> <li><code>error</code>: Error logs</li> <li><code>info</code>: General information</li> <li><code>debug</code>: Verbose debugging information</li> <li><code>datadump</code>: Dumps of various data for debugging</li> </ul>"},{"location":"configuration/logging/#subsystems","title":"Subsystems","text":"<p>Filtering may be applied by subsystem (the part of ExaCheck that is generating the log). The list of subsystems available are:</p> <ul> <li><code>announcer</code>: The route announcement/withdrawal manager</li> <li><code>configuration</code>: Configuration manager</li> <li><code>executor</code>: The check executor</li> <li><code>healthcheck</code>: Messages from health checks themselves</li> <li><code>logging</code>: Messages from the logging manager</li> <li><code>master</code>: Messages from the master process</li> <li><code>notification</code>: Messages generated from notifications</li> <li><code>utility</code>: Various utilities that do not fit elsewhere</li> <li><code>worker</code>: Worker related messages</li> </ul>"},{"location":"configuration/logging/#checks","title":"Checks","text":"<p>A list of health checks may be provided; events will only be sent to the logging target if they are generated by the defined health checks.</p>"},{"location":"configuration/logging/#examples","title":"Examples","text":"<p>To configure both syslog and file based logging:</p> <pre><code>---\n\nlogging:\n\n  # Basic file logger\n  - method: file\n    destination: /tmp/exacheck.log\n\n  # Send logs for announce/withdraw events using TCP to 192.0.2.100 port 514\n  - method: syslog\n    destination: 192.0.2.100\n    protocol: tcp\n    events:\n      - announce\n      - withdraw\n\n# The list of health checks\nchecks:\n    - ...\n</code></pre> <p>For more complete examples, check the relevant method page.</p>"},{"location":"configuration/logging/file/","title":"File","text":"<p>The <code>file</code> log method can be used to send logs to a file. By default logs will be rotated and compressed to ensure the disk doesn't get filled up.</p>"},{"location":"configuration/logging/file/#configuration-keys","title":"Configuration Keys","text":"<p>The following configuration keys apply to only the file target. The logging page lists general configuration which is shared with the <code>syslog</code> logger.</p> Key Type Default <code>structured</code> Bool <code>False</code> <code>destination</code> String <code>/tmp/exacheck.log</code> <code>size</code> String <code>10MB</code> <code>count</code> Integer <code>5</code> <code>compress</code> Bool <code>True</code> <code>compression_format</code> String <code>gz</code>"},{"location":"configuration/logging/file/#structured","title":"Structured","text":"<p>Structured logging can be enabled/disabled with the <code>structured</code> option. By default, logs sent to syslog servers are structured while file logs are not structured. An example of structured logs:</p> <pre><code>\"date\"=\"2024-01-21\" \"time\"=\"14:05:05.949\" \"level\"=\"INFO\" \"pid\"=\"280406\" \"check_name\"=\"TCP test to Google port 80\" \"file\"=\"/code/exacheck/worker.py\" \"line\"=\"201\" \"function\"=\"success\" \"event\"=\"info\" \"subsystem\"=\"worker\" \"message\"=\"Health check successful but service has not risen yet\"\n</code></pre> <p>If disabled, the logs will look like this:</p> <pre><code>2024-01-21 14:21:27.731 | INFO     | 284611 | TCP test to Google port 80 | /code/exacheck/worker.py:201 | success | info | worker | Health check successful but service has not risen yet\n</code></pre>"},{"location":"configuration/logging/file/#destination","title":"Destination","text":"<p>The path to the log file. During startup the path is checked to ensure that the ExaCheck process can write to it.</p>"},{"location":"configuration/logging/file/#size","title":"Size","text":"<p>The maximum log file size before rotating the log file. Defaults to <code>10MB</code>. Values can be specified in the format <code>&lt;size&gt;&lt;unit&gt;</code>.</p>"},{"location":"configuration/logging/file/#count","title":"Count","text":"<p>The maximum number of rotated log files to keep.</p>"},{"location":"configuration/logging/file/#compress","title":"Compress","text":"<p>The <code>compress</code> option allows for compression of rotated log files. If disabled, rotated logs will not be compressed.</p>"},{"location":"configuration/logging/file/#compression-format","title":"Compression Format","text":"<p>The <code>compression_format</code> option specifies which format to use for log file compression. The list of valid options are:</p> <ul> <li><code>gz</code></li> <li><code>bz2</code></li> <li><code>xz</code></li> <li><code>lzma</code></li> <li><code>tar</code></li> <li><code>tar.gz</code></li> <li><code>tar.bz2</code></li> <li><code>tar.xz</code></li> <li><code>zip</code></li> </ul> <p>By default <code>gz</code> is used as it is most commonly available.</p>"},{"location":"configuration/logging/file/#examples","title":"Examples","text":"<p>These are some examples of what can be configured for the <code>file</code> target.</p> Basic File LogFiltered File Log <p>A bare minimum configuration for logging to a file:</p> <pre><code>---\n\nlogging:\n\n  # Basic file logger\n  - method: file\n    destination: /tmp/exacheck.log\n\n# The list of health checks\nchecks:\n    - ...\n</code></pre> <p>Logging to a file with filtering applied:</p> <pre><code>---\n\nlogging:\n\n  # File logging with filtering applied for events and checks\n  # Only announce and withdraw events will be logged\n  - method: file\n    destination: /tmp/exacheck-announcements.log\n    size: 1MB\n    count: 10\n    events:\n      - announce\n      - withdraw\n    checks:\n      - Example Check 1\n      - Example Check 2\n\n# The list of health checks\nchecks:\n    - ...\n</code></pre>"},{"location":"configuration/logging/syslog/","title":"Syslog","text":"<p>The <code>syslog</code> log method can be used to send logs to a local socket or remote syslog servers using UDP or TCP.</p>"},{"location":"configuration/logging/syslog/#configuration-keys","title":"Configuration Keys","text":"<p>The following configuration keys apply to only the syslog target. The logging page lists general configuration which is shared with the <code>file</code> logger.</p> Key Type Default <code>structured</code> Bool <code>True</code> <code>destination</code> String <code>/dev/log</code> <code>port</code> Integer <code>514</code> <code>protocol</code> String <code>udp</code>"},{"location":"configuration/logging/syslog/#structured","title":"Structured","text":"<p>Structured logging can be enabled/disabled with the <code>structured</code> option. By default, logs sent to syslog servers are structured while file logs are not structured. An example of structured logs:</p> <pre><code>\"date\"=\"2024-01-21\" \"time\"=\"14:05:05.949\" \"level\"=\"INFO\" \"pid\"=\"280406\" \"check_name\"=\"TCP test to Google port 80\" \"file\"=\"/code/exacheck/worker.py\" \"line\"=\"201\" \"function\"=\"success\" \"event\"=\"info\" \"subsystem\"=\"worker\" \"message\"=\"Health check successful but service has not risen yet\"\n</code></pre> <p>If disabled, the logs will look like this:</p> <pre><code>2024-01-21 14:21:27.731 | INFO     | 284611 | TCP test to Google port 80 | /code/exacheck/worker.py:201 | success | info | worker | Health check successful but service has not risen yet\n</code></pre>"},{"location":"configuration/logging/syslog/#destination","title":"Destination","text":"<p>The destination to send logs to. May be a path to a socket, an IP address or hostname.</p>"},{"location":"configuration/logging/syslog/#port","title":"Port","text":"<p>If sending logs to a remote host, the port to send them to.</p>"},{"location":"configuration/logging/syslog/#protocol","title":"Protocol","text":"<p>The protocol to send the syslog messages with when logging to a remote host. Valid options are <code>tcp</code> or <code>udp</code>.</p> <p>Info</p> <p>UDP logging is preferred to ensure there are no delays should the syslog destination not be reachable.</p>"},{"location":"configuration/logging/syslog/#examples","title":"Examples","text":"<p>These are some examples of what can be configured for the <code>syslog</code> target.</p>"},{"location":"configuration/logging/syslog/#local-socket","title":"Local Socket","text":"<p>Some examples of configuring logging to sockets:</p> MinimalMultiple Targets <p>A minimal configuration for a single log target:</p> <pre><code>---\n\nlogging:\n\n  # Basic syslog logging - log to /dev/log\n  - method: syslog\n    destination: /dev/log\n\n# The list of health checks\nchecks:\n    - ...\n</code></pre> <p>A configuration for logging to multiple sockets with filtering:</p> <pre><code>---\n\nlogging:\n\n  # Basic syslog logging - log to /dev/log\n  - method: syslog\n    destination: /dev/log\n\n  # Log specific check to the socket /var/run/log.socket\n  - method: syslog\n    destination: /var/run/log.socket\n    structured: false\n    checks:\n      - Example Check 1\n\n# The list of health checks\nchecks:\n    - ...\n</code></pre>"},{"location":"configuration/logging/syslog/#remote-syslog-servers","title":"Remote Syslog Servers","text":"<p>These examples are for logging to remote syslog servers.</p> UDP (Minimal)UDPTCPMultiple Targets <p>A minimal UDP configuration looks like this:</p> <pre><code>---\n\nlogging:\n\n  # Basic syslog logging - Send to 192.0.2.1 UDP port 514\n  - method: syslog\n    destination: 192.0.2.1\n\n# The list of health checks\nchecks:\n    - ...\n</code></pre> <p>The port may be changed and structured logs disabled:</p> <pre><code>---\n\nlogging:\n\n  # Send logs to 192.0.2.1 UDP port 5144\n  - method: syslog\n    destination: 192.0.2.1\n    port: 5144\n    protocol: udp\n    structured: false\n\n# The list of health checks\nchecks:\n    - ...\n</code></pre> <p>TCP logging is configured the same way; the protocol just needs to be changed:</p> <pre><code>---\n\nlogging:\n\n  # Send logs for announce/withdraw events using TCP to 192.0.2.100 port 514\n  - method: syslog\n    destination: 192.0.2.100\n    protocol: tcp\n    events:\n      - announce\n      - withdraw\n\n# The list of health checks\nchecks:\n    - ...\n</code></pre> <p>Multiple targets may be defined as usual:</p> <pre><code>---\n\nlogging:\n\n  # Send logs to 192.0.2.1 UDP port 5144\n  - method: syslog\n    destination: 192.0.2.1\n    port: 5144\n    protocol: udp\n    structured: false\n\n  # Send logs for announce/withdraw events using TCP to 192.0.2.100 port 514\n  - method: syslog\n    destination: 192.0.2.100\n    protocol: tcp\n    events:\n      - announce\n      - withdraw\n\n# The list of health checks\nchecks:\n    - ...\n</code></pre>"},{"location":"deployment/","title":"Deployment","text":"<p>ExaCheck may be installed by following one of these steps:</p> <ul> <li>Building from PyPi or from source</li> <li>Using the ExaCheck Docker container</li> </ul> <p>After installation the configuration examples page provides some templates that you may use for configuration of ExaBGP/ExaCheck.</p> <p>For a list of dependencies, check the Python modules page,</p>"},{"location":"deployment/docker/","title":"Docker","text":"<p>A pre-built image of ExaCheck including the various requirements is available from the ExaCheck Docker Hub page. To use the image you will need to create the <code>exabgp.conf</code> and <code>exacheck.yaml</code> configuration files.</p>"},{"location":"deployment/docker/#docker-compose","title":"Docker Compose","text":"<p>A Docker Compose file is available. Included in the repository is a sample ExaBGP configuration file and sample ExaCheck configuration file.</p>"},{"location":"deployment/docker/#inbound-connections","title":"Inbound Connections","text":"<p>By default, ExaBGP does not listen for inbound BGP connections; only outbound connections are established. To allow inbound connections the environment variable <code>exabgp.tcp.bind</code> needs to be set. The provided Docker compose file does not allow inbound connections by default - the relevant environment line can be uncommented if you want to allow them.</p>"},{"location":"deployment/docker/#customising-exacheckpython-release","title":"Customising ExaCheck/Python Release","text":"<p>The Dockerfile is available should you want to change Python and/or ExaCheck release. The following build arguments are supported:</p> <ul> <li><code>PYTHON_VERSION</code>: The Python version for the container. Defaults to <code>3.11</code> currently.</li> <li><code>EXACHECK_VERSION</code>: The ExaCheck branch or tag to build from. Defaults to <code>v0.0.10</code> currently.</li> <li><code>EXACHECK_REPOSITORY</code>: The ExaCheck repository URL to clone from. Defaults to <code>https://github.com/exacheck/exacheck.git</code>.</li> </ul> <p>The same Dockerfile is used for building the DockerHub images.</p>"},{"location":"deployment/exabgp/","title":"ExaBGP","text":"<p>If installing ExaCheck from PyPi or source, ExaBGP requires some additional setup steps. If you are deploying the Docker container there is no need to follow the below steps.</p> <p>Warning</p> <p>If using Python 3.12 and installing an older ExaBGP release, you may get the following error when running ExaBGP:</p> <pre><code>root@970372c5ffcd:/# exabgp\nTraceback (most recent call last):\nFile \"/usr/local/bin/exabgp\", line 8, in &lt;module&gt;\n    sys.exit(run_exabgp())\n            ^^^^^^^^^^^^\nFile \"/usr/local/lib/python3.12/site-packages/exabgp/application/__init__.py\", line 18, in run_exabgp\n    from exabgp.application.bgp import main\nFile \"/usr/local/lib/python3.12/site-packages/exabgp/application/bgp.py\", line 18, in &lt;module&gt;\n    from exabgp.logger import Logger\nFile \"/usr/local/lib/python3.12/site-packages/exabgp/logger.py\", line 23, in &lt;module&gt;\n    from exabgp.configuration.environment import environment\nFile \"/usr/local/lib/python3.12/site-packages/exabgp/configuration/environment.py\", line 318, in &lt;module&gt;\n    from exabgp.vendoring.six.moves import configparser as ConfigParser\nModuleNotFoundError: No module named 'exabgp.vendoring.six.moves'\n</code></pre> <p>If you encounter this error, ExaBGP must be installed from source rather than the current PyPi release. Make sure <code>git</code> is available and install from the GitHub repository instead:</p> <pre><code>python3 -m pip install git+https://github.com/Exa-Networks/exabgp.git@4.2\n</code></pre>"},{"location":"deployment/exabgp/#system-user","title":"System User","text":"<p>A user account should be added for ExaBGP so it does not run as root. To add the account:</p> <pre><code>useradd -Ms /usr/sbin/nologin -d /run/exabgp exabgp\n</code></pre>"},{"location":"deployment/exabgp/#systemd-service-file","title":"systemd Service File","text":"<p>Installing ExaBGP from source or pip does not include a systemd service file. Create the file <code>/etc/systemd/system/exabgp.service</code> with this content:</p> <pre><code>[Unit]\nDescription=ExaBGP\nDocumentation=man:exabgp(1)\nDocumentation=man:exabgp.conf(5)\nDocumentation=https://github.com/Exa-Networks/exabgp/wiki\nAfter=network.target\nConditionPathExists=/etc/exabgp/exabgp.conf\n\n[Service]\nEnvironment=exabgp_daemon_daemonize=false\nUser=exabgp\nGroup=exabgp\nRuntimeDirectory=exabgp\nRuntimeDirectoryMode=0750\nExecStartPre=-/usr/bin/mkfifo /run/exabgp/exabgp.in\nExecStartPre=-/usr/bin/mkfifo /run/exabgp/exabgp.out\nExecStart=/opt/exacheck/bin/exabgp /etc/exabgp/exabgp.conf\nExecReload=/bin/kill -USR1 $MAINPID\nRestart=always\nCapabilityBoundingSet=CAP_NET_ADMIN\nAmbientCapabilities=CAP_NET_ADMIN\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Once the service file is created the service can be enabled to start on boot:</p> <pre><code>systemctl enable exabgp.service\n</code></pre>"},{"location":"deployment/exabgp/#configuration","title":"Configuration","text":"<p>ExaBGP needs to be configured to use ExaCheck. By default, the ExaBGP and ExaCheck configuration will be sourced from the <code>/etc/exabgp</code> directory; create that directory if it does not already exist:</p> <pre><code>mkdir /etc/exabgp\n</code></pre>"},{"location":"deployment/exabgp/#environment-file","title":"Environment File","text":"<p>The ExaBGP environment file needs to be created. To generate a default environment file run the following command:</p> <pre><code>/opt/exacheck/bin/exabgp --fi &gt; /etc/exabgp/exabgp.env\n</code></pre> <p>The following configuration options need to be changed in the environment file:</p> <ul> <li>API <code>ack</code> set to <code>false</code></li> <li>ExaBGP user changed from <code>nobody</code> to <code>exabgp</code></li> </ul> <p>A sed one liner to change the required values can be executed:</p> <pre><code>sed -i \\\n    -e \"s:ack = true:ack = false:\" \\\n    -e \"s:user = 'nobody':user = 'exabgp':\" \\\n    /etc/exabgp/exabgp.env\n</code></pre>"},{"location":"deployment/exabgp/#configuration-file","title":"Configuration File","text":"<p>The ExaBGP configuration file, <code>/etc/exabgp/exabgp.conf</code>, then needs to be created. An example template:</p> <pre><code># Define the ExaCheck process\nprocess exacheck {\n    run exacheck run;\n    encoder text;\n}\n\n# Connect to the BGP neighbor 192.0.2.1\nneighbor 192.0.2.1 {\n    description \"Example BGP neighbor\";\n\n    # This should be set to the ExaBGP router ID (eg. the main IP address of this server)\n    router-id 192.0.2.10;\n\n    # The local address to source BGP connections from\n    local-address 192.0.2.10;\n\n    # The local and peer AS numbers\n    local-as 65515;\n    peer-as 65515;\n\n    # The address family to advertise\n    family {\n        ipv4 unicast;\n    }\n\n    # Allow routes sent from the ExaCheck process to be sent to this neighbor\n    api {\n        processes [ exacheck ];\n    }\n}\n</code></pre> <p>For more configuration examples, see the ExaCheck configuration examples page.</p> <p>Once ExaBGP and ExaCheck have been configured, the systemd service can then be started:</p> <pre><code>systemctl start exabgp.service\n</code></pre>"},{"location":"deployment/examples/","title":"Examples","text":"<p>These are some example configurations for ExaBGP + ExaCheck. The health check configuration examples are taken from the relevant health check configuration page.</p>"},{"location":"deployment/examples/#exabgp-configuration","title":"ExaBGP Configuration","text":"<p>ExaBGP needs to be configured to execute ExaCheck. By default the ExaBGP configuration is located in <code>/etc/exabgp/exabgp.conf</code>.</p> <p>Warning</p> <p>ExaBGP must be configured with the environment variable <code>exabgp.api.ack</code> set to <code>false</code>. If deploying using the Docker container this is already handled for you. A future release of ExaCheck will resolve this.</p> <p>These configurations can be used as a template:</p> Single NeighborMultiple NeighborMultiple Address Families <p>A simple configuration for a single neighbor:</p> <pre><code># Define the ExaCheck process\nprocess exacheck {\n    run exacheck run;\n    encoder text;\n}\n\n# Connect to the BGP neighbor 192.0.2.1\nneighbor 192.0.2.1 {\n    description \"Example BGP neighbor\";\n\n    # This should be set to the ExaBGP router ID (eg. the main IP address of this server)\n    router-id 192.0.2.10;\n\n    # The local address to source BGP connections from\n    local-address 192.0.2.10;\n\n    # The local and peer AS numbers\n    local-as 65515;\n    peer-as 65515;\n\n    # The address family to advertise\n    family {\n        ipv4 unicast;\n    }\n\n    # Allow routes sent from the ExaCheck process to be sent to this neighbor\n    api {\n        processes [ exacheck ];\n    }\n}\n</code></pre> <p>A configuration file for multiple neighbors:</p> <pre><code># Define the ExaCheck process\nprocess exacheck {\n    run exacheck run;\n    encoder text;\n}\n\n# Define a template to apply common configuration to neighbors\ntemplate common {\n    # This should be set to the ExaBGP router ID (eg. the main IP address of this server)\n    router-id 192.0.2.10;\n\n    # The local address to source BGP connections from\n    local-address 192.0.2.10;\n\n    # The local and peer AS numbers\n    local-as 65515;\n    peer-as 65515;\n\n    # The address family to advertise\n    family {\n        ipv4 unicast;\n    }\n\n    # Allow routes sent from the ExaCheck process to be sent to these neighbors\n    api {\n        processes [ exacheck ];\n    }\n}\n\n# Connect to the BGP neighbor 192.0.2.1\nneighbor 192.0.2.1 {\n    description \"Example BGP neighbor\";\n    inherit common;\n}\n\n# Connect to the BGP neighbor 192.0.2.2\nneighbor 192.0.2.2 {\n    description \"Example BGP neighbor\";\n    inherit common;\n}\n</code></pre> <p>This configuration can be used for advertising routes to both IPv4 and IPv6 neighbors:</p> <pre><code># Define the ExaCheck process\nprocess exacheck {\n    run exacheck run;\n    encoder text;\n}\n\n# Define a template to apply common configuration to IPv4 neighbors\ntemplate common-ipv4 {\n    # This should be set to the ExaBGP router ID (eg. the main IP address of this server)\n    router-id 192.0.2.10;\n\n    # The local address to source BGP connections from\n    local-address 192.0.2.10;\n\n    # The local and peer AS numbers\n    local-as 65515;\n    peer-as 65515;\n\n    # The address family to advertise\n    family {\n        ipv4 unicast;\n    }\n\n    # Allow routes sent from the ExaCheck process to be sent to these neighbors\n    api {\n        processes [ exacheck ];\n    }\n}\n\n# Define a template to apply common configuration to IPv6 neighbors\ntemplate common-ipv6 {\n    # This should be set to the ExaBGP router ID (eg. the main IP address of this server)\n    router-id 192.0.2.10;\n\n    # The local address to source BGP connections from\n    local-address 2001:db8::a;\n\n    # The local and peer AS numbers\n    local-as 65515;\n    peer-as 65515;\n\n    # The address family to advertise\n    family {\n        ipv6 unicast;\n    }\n\n    # Allow routes sent from the ExaCheck process to be sent to these neighbors\n    api {\n        processes [ exacheck ];\n    }\n}\n\n# Connect to the BGP neighbor 192.0.2.1\nneighbor 192.0.2.1 {\n    description \"Example IPv4 BGP neighbor\";\n    inherit common-ipv4;\n}\n\n# Connect to the BGP neighbor 2001:db8::1\nneighbor 2001:db8::1 {\n    description \"Example IPv6 BGP neighbor\";\n    inherit common-ipv6;\n}\n</code></pre>"},{"location":"deployment/examples/#exacheck-configuration","title":"ExaCheck Configuration","text":"<p>These are some example ExaCheck configuration files with various features used. By default the configuration file is located at <code>/etc/exabgp/exacheck.yaml</code>.</p> Basic ConfigurationNotifications/Logging Configuration <p>A basic HTTP health check configuration; logging is only to STDOUT:</p> <pre><code>---\n\n# The list of health checks to perform\nchecks:\n\n  - name: Example Basic HTTP Check\n    description: Perform a HTTP request to the web server and verify a successful response code is received\n    args:\n      method: http\n      host: 127.0.0.1\n      url: https://example.com\n    prefixes:\n      - 192.0.2.255\n    nexthop: self\n</code></pre> <p>Multiple health checks configured with notifications to Microsoft Teams and file logging:</p> <pre><code>---\n\n# Configure logging\nlogging:\n\n  # Basic file logger\n  - method: file\n    destination: /tmp/exacheck.log\n\n# Configure notifications\nnotifications:\n\n  - name: Microsoft Teams Example\n    description: This target will only receive route withdraw/announce events.\n    url: msteams://organisation/TokenA/TokenB/TokenC/\n\n# The list of health checks to perform\nchecks:\n\n  - name: Example Basic HTTP Check\n    description: Perform a HTTP request to the web server and verify a successful response code is received\n    args:\n      method: http\n      host: 127.0.0.1\n      url: https://example.com\n    prefixes:\n      - 192.0.2.255\n    nexthop: self\n\n  - name: Example NTP Stratum Check\n    description: Ensure that the IP 2001:db8::123 responds to NTP queries and the server is at least stratum 2\n    args:\n      method: ntp\n      host: 2001:db8::123\n      max_stratum: 2\n    prefixes:\n      - 2001:db8:aaaa::ffff/128\n      - 2001:db8:aaaa::123/128\n    nexthop: self\n\n  - name: Example DNS CNAME Test\n    description: Perform a CNAME query for www.example.com to 192.0.2.1 and verify the CNAME target contains the word \"example\"\n    args:\n      method: dns\n      host: 192.0.2.1\n      query: www.example.com\n      type: cname\n      pattern: example\n    prefixes:\n      - 192.0.2.253\n    nexthop: self\n</code></pre>"},{"location":"deployment/modules/","title":"Python Modules","text":"<p>Various Python modules are required to use ExaCheck. The current requirements and their versions can be found in the pyproject.toml file. For reference they are listed here with their purpose.</p>"},{"location":"deployment/modules/#main-script","title":"Main Script","text":"<p>These dependencies are used as a part of the main script.</p> <ul> <li>Apprise: <code>apprise</code> is used to handle notifications to external services.</li> <li>ExaBGP: <code>exabgp</code> is used to actually talk BGP; ExaCheck communicates with ExaBGP to announce or withdraw routes as needed.</li> <li>Loguru: <code>loguru</code> is used for logging.</li> <li>Pydantic: <code>pydantic</code> is used to validate and store the configuration objects and check results.</li> <li>PyYAML: <code>pyyaml</code> is used to load and parse the configuration file into a dict, ready for Pydantic to consume.</li> <li>setproctitle: <code>setproctitle</code> will change the process title for the child processes.</li> <li>tabulate: <code>tabulate</code> is used to format output into a table.</li> <li>UltraJSON: <code>ujson</code> is used for loading configuration from JSON.</li> </ul>"},{"location":"deployment/modules/#health-checks","title":"Health Checks","text":"<p>These dependencies are required for the various health checks to work.</p> <ul> <li>dnspython: <code>dnspython</code> is used for the <code>dns</code> health check method and to look up hostnames when required for other checks.</li> <li>icmplib: <code>icmplib</code> is used for the <code>icmp</code> health check method.</li> <li>ntplib: <code>ntplib</code> is used for the <code>ntp</code> health check method.</li> <li>HTTPX: <code>HTTPX</code> is used for the <code>http</code> health check method.</li> </ul>"},{"location":"deployment/modules/#icmplib-note","title":"icmplib Note","text":"<p>By default, icmplib is used in non-privileged mode. There ARE some requirements for this to work depending on the Linux distribution, see step 2 on the icmplib without privileges page.</p>"},{"location":"deployment/modules/#command-line-interface","title":"Command Line Interface","text":"<p>These dependencies are required for the command line interface.</p> <ul> <li>Click: <code>click</code> provides the command line interface.</li> </ul>"},{"location":"deployment/modules/#sentry","title":"Sentry","text":"<p>If you would like to enable Sentry support, the <code>sentry-sdk</code> module must be installed; it is not included as a default dependency. ExaCheck may be installed using the <code>sentry</code> extras tag to include the module, as an example:</p> <pre><code>python3 -m pip install exacheck[sentry]\n</code></pre>"},{"location":"deployment/python/","title":"Python","text":"<p>ExaCheck requires a recent version of Python; Python 3.10 - 3.12 is required. If you try to run ExaCheck on an earlier release of Python it will not work.</p>"},{"location":"deployment/python/#venv-setup","title":"venv Setup","text":"<p>While not required, it is recommended that ExaCheck is installed in a Python virtual environment. To setup a virtual environment, first ensure that the relevant <code>python-venv</code> package is installed for the distribution you are running:</p> Ubuntu/DebianAlma/CentOS/RedHat <pre><code>apt install python3-venv\n</code></pre> <p>Depending on the release, the venv module may already be installed. If not, install the <code>python3-virtualenv</code> package:</p> <pre><code>yum install python3-virtualenv\n</code></pre>"},{"location":"deployment/python/#venv-creation","title":"venv Creation","text":"<p>To create the virtual environment in <code>/opt/exacheck</code>:</p> <pre><code>python3 -m venv /opt/exacheck\n</code></pre> <p>The environment should now be activated before continuing with the PyPi or source installation:</p> <pre><code>source /opt/exacheck/bin/activate\n</code></pre>"},{"location":"deployment/python/#pypi-package","title":"PyPI Package","text":"<p>ExaCheck can be installed using <code>pip</code> from the PyPI package repository:</p> <pre><code>python3 -m pip install exacheck\n</code></pre> <p>All requirements will be installed automatically.</p>"},{"location":"deployment/python/#source-build","title":"Source Build","text":"<p>To install ExaCheck from source you must have the <code>git</code> package available. To install from the <code>main</code> branch:</p> <pre><code>python3 -m pip install git+https://github.com/exacheck/exacheck.git@main\n</code></pre> <p>To install a specific release, change the <code>main</code> branch to the relevant release name. As an example for <code>v0.1.2</code>:</p> <pre><code>python3 -m pip install git+https://github.com/exacheck/exacheck.git@v0.1.2\n</code></pre>"},{"location":"deployment/python/#post-installation","title":"Post Installation","text":"<p>After installation, ExaBGP requires some additional setup. Follow the steps on the ExaBGP setup page.</p>"},{"location":"deployment/python/#logging-directory","title":"Logging Directory","text":"<p>If file based logging will be used, the directory to store the logs must exist and be writeable by the user running ExaBGP. As an example, if you would like to log to the directory <code>/var/log/exacheck</code>:</p> <pre><code>mkdir /var/log/exacheck\nchown exacheck:exacheck /var/log/exacheck\n</code></pre> <p>The relevant logging configuration in the ExaCheck configuration file would look like this:</p> <pre><code>---\n\n# Logging configuration\nlogging:\n  - method: file\n    destination: /var/log/exacheck/exacheck.log\n\n# The list of health checks\nchecks:\n    - ...\n</code></pre>"},{"location":"deployment/python/#exacheck-configuration","title":"ExaCheck Configuration","text":"<p>You may now proceed with the ExaCheck configuration. The example configuration files can be used as a template.</p>"},{"location":"deployment/upgrading/","title":"Upgrading","text":"<p>Upgrading ExaCheck depends on the initial installation method.</p>"},{"location":"deployment/upgrading/#upgrade-process","title":"Upgrade Process","text":"<p>If ExaCheck has been installed using <code>pip</code> (from PyPi or from source), the package can be upgraded by running the install command again with the <code>--upgrade</code> flag.</p> <p>For the latest PyPi package:</p> <pre><code>python3 -m pip install exacheck --upgrade\n</code></pre> <p>If using the Docker image and the tag is set to <code>latest</code> (the default in the sample), simply pull and start:</p> <pre><code>docker compose pull\ndocker compose start\n</code></pre>"},{"location":"deployment/upgrading/#upgrade-notes","title":"Upgrade Notes","text":"<p>Every effort is made to keep the configuration file between releases compatible. From time to time there may be some configuration schema changes that must be made to add additional features or change how existing features work; these changes will be listed here.</p>"},{"location":"deployment/upgrading/#006","title":"0.0.6","text":"<p>When upgrading to <code>0.0.5</code>, the <code>monitoring_interval</code> and <code>live_reload</code> options have been migrated under the <code>exacheck</code> configuration key.</p>"},{"location":"development/","title":"Development","text":"<p>In future this page will include development information for creating your own custom health checks using plugins. The feature has not yet been implemented, this page will be updated once ready.</p>"},{"location":"development/#contributing","title":"Contributing","text":"<p>Pull requests for ExaCheck are welcome. It is recommended to using the included development environment for VS Code which includes formatting and linting modules/tools as well as helpful extensions for VS Code.</p>"},{"location":"development/changelog/","title":"Changelog","text":"<p>The following changelog is available via the ExaCheck GitHub repository CHANGELOG file.</p>"},{"location":"development/changelog/#exacheck-changelog","title":"ExaCheck Changelog","text":""},{"location":"development/changelog/#2024-07-10-013","title":"2024-07-10 - 0.1.3","text":"<p>Fixes:</p> <ul> <li>If a DNS health check had a response pattern configured the last character of the response was being removed during validation. Some additional debug output was added in case of future issues.</li> </ul> <p>Misc:</p> <ul> <li>Update core requirements:</li> <li>Sentry</li> <li>Pydantic</li> <li>Update various development dependencies (linting/formatting tools)</li> <li>Add debugger launch configs for VS Code</li> </ul>"},{"location":"development/changelog/#2024-06-13-012","title":"2024-06-13 - 0.1.2","text":"<p>Changes:</p> <ul> <li>Bump ExaBGP to build 4.2.22 - This fixes build issues on Python 3.12 which required working around. The Docker image has had the manual deployment of ExaBGP removed since it can now be built on its own successfully.</li> </ul> <p>Misc:</p> <ul> <li>Update core requirements:</li> <li>Pydantic</li> <li>Sentry</li> <li>Apprise</li> <li>ujson</li> <li>Update various development dependencies (linting/formatting tools)</li> <li>VS Code Workspace fixes (debugpy, spelling)</li> <li>Dev container image mirror changed to <code>gitlab.com</code></li> <li>Remove duplicate apt install in dev container</li> <li>Reformat docker ignore file</li> <li>Update default compose file</li> </ul>"},{"location":"development/changelog/#2024-04-18-011","title":"2024-04-18 - 0.1.1","text":"<p>Changes:</p> <ul> <li>Docker builds now use a venv rather than installing in system Python</li> <li>Docker builds now use Python 3.12 as the base</li> </ul> <p>Fixes:</p> <ul> <li>Docker builds were not including ExaBGP so they would not be able to work. To fix this the requirement on ExaBGP has been dropped from Python &gt;= 3.12. To use ExaCheck with Python 3.12 onwards (if not using Docker) you must currently install ExaBGP from source:</li> </ul> <pre><code>python3 -m pip --no-cache-dir install \"git+https://github.com/Exa-Networks/exabgp.git@4.2\"\n</code></pre> <p>Misc:</p> <ul> <li>Update Apprise, Pydantic, Sentry and various development related modules</li> </ul>"},{"location":"development/changelog/#2024-04-01-010","title":"2024-04-01 - 0.1.0","text":"<p>Changes:</p> <ul> <li>The HTTP health check method now uses HTTPX instead of <code>requests</code> to make the request</li> <li>HTTP check SNI adapter removed - HTTPX can handle SNI natively without requiring an adapter</li> </ul> <p>Misc:</p> <ul> <li>Update Sentry, Apprise and Pydantic releases</li> <li>Update development group dependency Markdown</li> <li>Update various development dependencies</li> <li>Pytest configuration moved from .ini file to <code>pyproject.toml</code></li> <li>MyPy configuration moved from .ini file to <code>pyproject.toml</code></li> </ul> <p>Features</p> <ul> <li>With the change to HTTPX, the HTTP health check now supports HTTP2 (defaults to <code>False</code>)</li> </ul>"},{"location":"development/changelog/#2024-02-21-0011","title":"2024-02-21 - 0.0.11","text":"<p>Fixes:</p> <ul> <li>Reap zombie processes and respawn on failure (fixes #8)</li> </ul> <p>Misc:</p> <ul> <li>Update Sentry and dnspython releases</li> </ul>"},{"location":"development/changelog/#2024-02-08-0010","title":"2024-02-08 - 0.0.10","text":"<p>Changes:</p> <ul> <li>Add support for Python 3.10 and Python 3.12</li> <li>ExaBGP will be built from source if using Python 3.12 (using the 4.2 branch)</li> <li>Dockerfile changes to add support for Python 3.12:</li> <li>Install ExaCheck from git rather than PyPi to allow easier version customisation</li> <li>Make sure wheel/setuptools/pip is up to date</li> </ul> <p>Misc:</p> <ul> <li>Update Semgrep and pydantic releases</li> <li>Remove requirement on types-requests; this is not needed for production usage</li> <li>Re-format pyproject.toml - use groups for development/typing/formatting/testing</li> </ul>"},{"location":"development/changelog/#2024-02-07-009","title":"2024-02-07 - 0.0.9","text":"<p>Fixes:</p> <ul> <li><code>http</code> check method fails to parse the URL correctly for IPv6 hosts; IPv6 address must be enclosed with <code>[]</code></li> </ul>"},{"location":"development/changelog/#2024-02-07-008","title":"2024-02-07 - 0.0.8","text":"<p>Fixes:</p> <ul> <li>Log file <code>count</code> option was not being used at all; log files would rotate but never be cleaned up</li> <li>If a <code>host</code> value was provided for the <code>http</code> check method the value was being ignored; the host was overwritten from the hostname in URL</li> </ul>"},{"location":"development/changelog/#2024-01-31-007","title":"2024-01-31 - 0.0.7","text":"<p>Fixes:</p> <ul> <li>Correct the logging event types for announce/withdraw of routes for log filtering to work correctly</li> <li>Fix metric attribute naming error</li> </ul> <p>Changes:</p> <ul> <li>Log exceptions when sending routes to ExaBGP</li> <li>Update syslog format string</li> <li>Include hostname when logging to remote servers</li> <li>Include timestamp when logging to remote servers or when structured logging is used</li> </ul> <p>Features:</p> <ul> <li>Add the following options for Sentry; values are set to the Sentry defaults:</li> <li><code>attach_stacktrace</code></li> <li><code>include_local_variables</code></li> <li><code>debug</code></li> <li>Move Sentry profile sample rate out of experimental configuration</li> </ul>"},{"location":"development/changelog/#2024-01-30-006","title":"2024-01-30 - 0.0.6","text":"<p>Fixes:</p> <ul> <li>Formatting fixup in <code>__version__.py</code></li> <li>Ensure STDOUT is flushed on route announce/withdraw</li> <li>Define <code>app_url</code> for Apprise</li> <li>Change line breaks for Apprise notification as they are broken in Slack</li> <li>Debug or trace level logging must be enabled to log the Python filename/line number/function name in file/syslog</li> </ul> <p>Changes:</p> <ul> <li>ExaCheck internal configuration (eg. for the <code>live_reload</code> feature) has been migrated out of the base <code>Settings</code> class. Instead, ExaCheck configuration now resides in its own <code>settings.ExaCheck</code> class.</li> </ul>"},{"location":"development/changelog/#2024-01-29-005","title":"2024-01-29 - 0.0.5","text":"<p>Fixes:</p> <ul> <li>ExaBGP fails to start on Python 3.12. ExaCheck now requires Python 3.11.</li> </ul> <p>Features</p> <ul> <li>Docker deployment now available - see the ExaCheck Docker deployment page for instructions.</li> </ul>"},{"location":"development/changelog/#2024-01-29-004","title":"2024-01-29 - 0.0.4","text":"<p>Fixes:</p> <ul> <li>Replace static version definition in <code>__version__.py</code> with <code>importlib.metadata</code> lookup</li> </ul> <p>Features:</p> <ul> <li>Add support for Python 3.11</li> </ul> <p>Misc:</p> <ul> <li>Update Apprise and dnspython</li> </ul>"},{"location":"development/changelog/#2024-01-29-003","title":"2024-01-29 - 0.0.3","text":"<p>Fixes:</p> <ul> <li>Add CHANGELOG.md</li> </ul>"},{"location":"development/changelog/#2024-01-29-003a0","title":"2024-01-29 - 0.0.3a0","text":"<p>Fixes:</p> <ul> <li>Adds dependency on <code>loguru</code> and <code>click</code> correctly</li> </ul>"},{"location":"development/changelog/#2024-01-29-002","title":"2024-01-29 - 0.0.2","text":"<p>Initial public release</p>"},{"location":"development/environment/","title":"Development Environment","text":"<p>If using VS Code, a development environment is available. The development environment includes everything needed for editing, testing and linting.</p>"},{"location":"development/environment/#requirements","title":"Requirements","text":"<p>The following requirements are needed to use the development environment:</p> <ul> <li>Visual Studio Code</li> <li>Visual Studio Code Dev Containers extension</li> <li>Docker - Only the Docker Engine package is required for Linux</li> </ul>"},{"location":"development/environment/#instructions","title":"Instructions","text":"<p>First make sure the requirements are installed.</p> <p>Clone the ExaCheck repository:</p> SSH TransportHTTPS Transport <pre><code>git clone git@github.com:exacheck/exacheck.git\n</code></pre> <pre><code>git clone https://github.com/exacheck/exacheck.git\n</code></pre> <p>In VS Code, go to File -&gt; Open Workspace from File. You can then browse to the repository that was cloned and select the <code>exacheck.code-workspace</code> file.</p> <p>VS Code will then prompt you to reopen the workspace in the development container. The development container will then be pulled. The VS Code extensions will be automatically install inside the development container.</p> <p>On container creation the create.sh script will be executed. This script will install all Python modules required using Poetry.</p>"},{"location":"development/internals/","title":"Internals","text":"<p>Coming soon.</p>"},{"location":"development/roadmap/","title":"Roadmap","text":"<p>ExaCheck is currently work in progress as I have time. When I started writing ExaCheck I got about half way before taking a break for a few months; at some point I plan to go through everything in more detail to fix up anything I may have forgotten about.</p>"},{"location":"development/roadmap/#upcoming-features","title":"Upcoming Features","text":"<p>As I need them I plan to add additional health check methods. Unless there is a request or I need it myself you may not have a health check method suitable for your use case. If that is the case please create a request on GitHub; I am interested to see other use cases.</p>"},{"location":"development/roadmap/#general-features","title":"General Features","text":"<ul> <li> Python 3.10 support</li> <li> Python 3.11 support: This is the commonly available Python release for modern distributions.</li> <li> Python 3.12 support: The current stable Python release.</li> <li> Complete test files: Currently there is only a basic test for loading the configuration.</li> <li> Logging for when ExaCheck is shut down. Due to a race condition Loguru is not able to log inside a signal handler.</li> <li> Make the <code>metric_down</code> feature work. If set, routes should be announced when the service is down but have the configured metric attribute set.</li> <li> API for monitoring purposes.</li> <li> Configuration management for ExaBGP. This should remove the need to have a separate exabgp.conf file (if the setting is used).</li> </ul>"},{"location":"development/roadmap/#cli","title":"CLI","text":"<ul> <li> Command line option to print table of available configuration options using the available field data.</li> <li> Command line option to send test notifications.</li> <li> Option to list available checks and their configuration (or view configuration for a single check.)</li> </ul>"},{"location":"development/roadmap/#shell-health-check","title":"Shell Health Check","text":"<ul> <li> Add variable support to allow passing information to the command that is being executed such as the next hop address.</li> </ul>"},{"location":"development/roadmap/#http-health-check","title":"HTTP Health Check","text":"<ul> <li> Add support for HTTP2 and HTTP3.</li> </ul>"},{"location":"development/roadmap/#dns-health-check","title":"DNS Health Check","text":"<ul> <li> Add support for DNS over TLS (DoT) and DNS over HTTPS (DoH).</li> </ul>"},{"location":"development/roadmap/#future-plans","title":"Future Plans","text":"<p>In the future after any features are complete I plan to do these:</p> <ul> <li> Clean up comments: The current functions are mostly missing documentation about parameters that are passed to them.</li> <li> Tidy up logging: I plan to tidy up logging a bit and split log messages into \"short\" and \"long\".</li> <li> Website tidy up: The website needs to be reviewed and have grammar fixed up.</li> <li> Plugin based health checks: Allow you to place customer health checks in a directory and load them automatically.</li> </ul>"},{"location":"features/","title":"Features","text":"<p>ExaCheck is primarily targeted to centralized health checks where one or more servers handle health checks for multiple services.</p> <ul> <li>Command line interface</li> <li>Live configuration reloads</li> <li>Health checks implemented in pure python where possible; no need to write scripts or use chains of commands to validate output</li> <li>Notifications for announce/withdraw events and other information</li> <li>Configuration validation (if using live configuration reloads, configuration is validated before application)</li> <li>Out of the box sane defaults where possible</li> <li>JSON schema of configuration (see schema.json for the current schema)</li> <li>Docker deployment supported</li> <li>Full IPv4 and IPv6 support</li> <li>Choice of YAML or JSON configuration</li> </ul>"},{"location":"features/#live-configuration-reloads","title":"Live Configuration Reloads","text":"<p>Changes to the configuration file can optionally be applied without having to restart the ExaBGP/ExaCheck services. The live reload operation first checks to ensure the configuration is valid; if it is not valid the live reload will not proceed. Any unchanged services will not be affected.</p> <p>To enable the live configuration reload feature see the relevant configuration page.</p>"},{"location":"features/#notifications","title":"Notifications","text":"<p>Notifications are handled using Apprise. For a list of supported notification targets see the Apprise Wiki.</p> <p>As with logging, notifications may be filtered per health check and for certain events. Multiple notification targets can be defined.</p> <p>Check the notification configuration page to see examples of configuration options.</p>"},{"location":"features/#docker-deployment","title":"Docker Deployment","text":"<p>A Docker container which includes ExaBGP, ExaCheck and all requirements is available for easy deployment. The docker deployment page includes further details.</p>"},{"location":"features/#configuration-format","title":"Configuration Format","text":"<p>The default configuration format is yaml. If the configuration file that is being loaded has the file extension <code>json</code> it will be loaded as a JSON document instead.</p> <p>For a full list of configuration options see the configuration page or check the examples page for inspiration.</p>"},{"location":"features/#process-naming","title":"Process Naming","text":"<p>The master and worker processes are named based on the task they are performing at the time and their status. As an example:</p> <pre><code>ExaCheck Master Process [/code/configuration.yaml]: Sleeping\n    ExaCheck Worker [ICMP test to Google]: Performing health check [startup]\n    ExaCheck Worker [TCP test to Google port 80]: Sleeping for 14.853 seconds [rising (1/3)]\n    ExaCheck Worker [File test to check if /tmp/test exists]: Sleeping for 15.000 seconds [rising (1/3)]\n    ExaCheck Worker [DNS query to Cloudflare public resolver]: Sleeping for 14.952 seconds [rising (1/3)]\n    ExaCheck Worker [DNS query to Cloudflare public resolver with validation]: Sleeping for 14.946 seconds [rising (1/3)]\n</code></pre>"},{"location":"features/cli/","title":"Command Line Interface","text":"<p>A command line interface <code>exacheck</code> is included with ExaCheck. The CLI allows you to run ExaCheck, dump the JSON configuration schema and validate the configuration file.</p>"},{"location":"features/cli/#running-exacheck","title":"Running ExaCheck","text":"<p>To run ExaCheck use the <code>run</code> command:</p> <pre><code>exacheck run\n</code></pre> <p>By default, the configuration will attempt to be loaded from the file <code>/etc/exabgp/exacheck.yaml</code>.</p>"},{"location":"features/cli/#run-options","title":"Run Options","text":"<p>The following options are available for the <code>run</code> command:</p> Option Name Type Description <code>-h</code> / <code>--help</code> Flag Show the help output and exit. <code>-f</code> / <code>--file</code> String The path to the configuration file to load from. <code>-v</code> / <code>--verbosity</code> Count The verbosity level. May be specified multiple times (eg. <code>-vvvvv</code>)."},{"location":"features/cli/#run-environment-variables","title":"Run Environment Variables","text":"<p>The following environment variables are supported:</p> Variable Name Type Description <code>EXACHECK_CONFIG</code> String The path to the configuration file to load. <code>EXACHECK_VERBOSITY</code> Integer The verbosity level (higher is more verbose)"},{"location":"features/cli/#testing-configuration","title":"Testing Configuration","text":"<p>The <code>test</code> command can be used to load and validate the configuration file. The test command is a no-op; logs/notifications will not be sent to any defined targets except STDOUT.</p> <p>To test the configuration:</p> <pre><code>exacheck test\n</code></pre> <p>To enable verbose output:</p> <pre><code>exacheck test -vvvvvv\n</code></pre>"},{"location":"features/cli/#testing-options","title":"Testing Options","text":"<p>The following options are available for the <code>test</code> command:</p> Option Name Type Description <code>-h</code> / <code>--help</code> Flag Show the help output and exit. <code>-f</code> / <code>--file</code> String The path to the configuration file to load from. <code>-v</code> / <code>--verbosity</code> Count The verbosity level. May be specified multiple times (eg. <code>-vvvvv</code>)."},{"location":"features/cli/#test-environment-variables","title":"Test Environment Variables","text":"<p>The following environment variables are supported:</p> Variable Name Type Description <code>EXACHECK_CONFIG</code> String The path to the configuration file to load. <code>EXACHECK_VERBOSITY</code> Integer The verbosity level (higher is more verbose)."},{"location":"features/cli/#configuration-schema","title":"Configuration Schema","text":"<p>The <code>schema</code> command is used to generate the JSON schema file. The JSON schema will be printed to STDOUT where you can then redirect it into a file if needed. As an example:</p> <pre><code>exacheck schema &gt; schema.json\n</code></pre> <p>The JSON schema file can in turn be used to validate the configuration and provide hints to editors that support it (eg. VS Code).</p>"},{"location":"features/logging/","title":"Logging","text":"<p>Loguru is used to provide detailed logging. By default, logs are sent to STDOUT with the capability of also being logged to files and/or remote syslog servers.</p> <p>Some of the logging features include:</p> <ul> <li>Multiple logging targets are supported - Logs may be sent to a remote syslog server and a local file if required.</li> <li>Logs can be filtered by level, subsystem, event and health check - Filtering is applied per logging target.</li> <li>Structured logging can be enabled for a logging target for easy processing.</li> <li>A custom log format may be defined per logging target - if there is logging information that is not relevant to you simply supply your own format.</li> <li>If logging to a file, rotation/compression can be handled for you by ExaCheck.</li> </ul> <p>Check the logging configuration page to see available options.</p> <p>An example of the default STDOUT log with verbose logging:</p> <p></p>"},{"location":"features/requests/","title":"Feature Requests","text":"<p>Is there a feature that you think would be useful for other people? A feature request can be submitted via the GitHub issues page.</p> <p>Pull requests are also accepted and appreciated!</p>"}]}